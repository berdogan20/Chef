{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { forkJoin } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\nlet BasketComponent = class BasketComponent {\n  constructor(route, router, authService, foodService, orderService, userService, statusService, basketItemService) {\n    this.route = route;\n    this.router = router;\n    this.authService = authService;\n    this.foodService = foodService;\n    this.orderService = orderService;\n    this.userService = userService;\n    this.statusService = statusService;\n    this.basketItemService = basketItemService;\n    this.basket = [];\n    this.foods = [];\n  }\n  ngOnInit() {\n    this.basketItemService.getBasketItemsBasketItem({\n      email: this.authService.currentUser?.email\n    }).subscribe(basket => {\n      this.basket = basket;\n      // Fetch food data for each order\n      const foodObservables = basket.map(basketItem => this.foodService.findFood({\n        id: basketItem.foodId\n      }));\n      forkJoin(foodObservables).subscribe(foods => {\n        // All food requests have completed here\n        this.foods = foods;\n      }, err => this.handleError(err));\n    }, err => this.handleError(err));\n    this.currentUser = this.authService.currentUser;\n  }\n  handleError(err) {\n    console.log(\"Response Error, Status:\", err.status);\n    console.log(\"Response Error, Status Text:\", err.statusText);\n    console.log(err);\n  }\n  order() {\n    let dto = {\n      address: this.authService.currentUser?.address,\n      orderDate: new Date().toISOString(),\n      orderId: uuidv4(),\n      orderOwner: this.authService.currentUser?.email,\n      statusId: 1,\n      totalPayment: this.getTotalPayment()\n    };\n    console.log(dto);\n    this.orderService.buyOrder({\n      body: dto\n    }).subscribe(_ => {\n      this.orderService.convertBasketItemsToOrderItemsOrder({\n        email: this.authService.currentUser?.email,\n        body: dto\n      }).subscribe(_ => {\n        this.basket = [];\n      }, err => this.handleError(err));\n    }, err => this.handleError(err));\n  }\n  getTotalPayment() {\n    let total = 0;\n    for (let basketItem of this.basket) {\n      total += basketItem.amount * basketItem.price;\n    }\n    return total;\n  }\n  remove(index) {\n    let itemToRemove = this.basket[index];\n    if (this.currentUser.email) {\n      if (itemToRemove.basketItemId) {\n        this.basketItemService.removeBasketItemBasketItem({\n          email: this.currentUser.email,\n          foodId: itemToRemove.foodId\n        }).subscribe(_ => {}, err => this.handleError(err));\n      }\n    }\n    this.basket.splice(index, 1);\n    this.foods.splice(index, 1);\n  }\n};\nBasketComponent = __decorate([Component({\n  selector: 'app-basket',\n  templateUrl: './basket.component.html',\n  styleUrls: ['./basket.component.css']\n})], BasketComponent);\nexport { BasketComponent };","map":{"version":3,"mappings":"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","names":["Component","forkJoin","v4","uuidv4","BasketComponent","constructor","route","router","authService","foodService","orderService","userService","statusService","basketItemService","ngOnInit","getBasketItemsBasketItem","email","currentUser","subscribe","basket","foodObservables","map","basketItem","findFood","id","foodId","foods","err","handleError","console","log","status","statusText","order","dto","address","orderDate","Date","toISOString","orderId","orderOwner","statusId","totalPayment","getTotalPayment","buyOrder","body","_","convertBasketItemsToOrderItemsOrder","total","amount","price","remove","index","itemToRemove","basketItemId","removeBasketItemBasketItem","splice","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/basket/basket.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { OrderRm, FoodRm, OrderItem, UserRm, OrderDto, BasketItem } from '../api/models';\nimport { BasketItemService, CategoryService, FoodService, StatusService, UserService } from '../api/services';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from './../api/services/order.service';\nimport { AuthService } from './../auth/auth.service';\nimport { forkJoin } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\n\n\n@Component({\n  selector: 'app-basket',\n  templateUrl: './basket.component.html',\n  styleUrls: ['./basket.component.css']\n})\nexport class BasketComponent {\n\n  basket: BasketItem[] = [];\n  foods: FoodRm[] = [];\n  currentUser!: UserRm;\n\n\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    private foodService: FoodService,\n    private orderService: OrderService,\n    private userService: UserService,\n    private statusService: StatusService,\n    private basketItemService: BasketItemService) { }\n\n\n  ngOnInit(): void {\n\n    this.basketItemService.getBasketItemsBasketItem({ email: this.authService.currentUser?.email! })\n      .subscribe(\n        (basket) => {\n          this.basket = basket;\n          // Fetch food data for each order\n          const foodObservables = basket.map((basketItem) =>\n            this.foodService.findFood({ id: basketItem.foodId! })\n          );\n\n          forkJoin(foodObservables).subscribe(\n            (foods) => {\n              // All food requests have completed here\n              this.foods = foods;\n            },\n            (err) => this.handleError(err)\n          );\n        },\n        (err) => this.handleError(err)\n    );\n\n    this.currentUser = this.authService.currentUser!;\n  }\n\n\n\n  private handleError(err: any) {\n    console.log(\"Response Error, Status:\", err.status);\n    console.log(\"Response Error, Status Text:\", err.statusText);\n    console.log(err);\n  }\n\n\n  order() {\n\n    let dto: OrderDto = {\n      address: this.authService.currentUser?.address,\n      orderDate: new Date().toISOString(),\n      orderId: uuidv4(), \n      orderOwner: this.authService.currentUser?.email,\n      statusId: 1,\n      totalPayment: this.getTotalPayment()\n    }\n\n    console.log(dto);\n\n    this.orderService.buyOrder({ body: dto })\n      .subscribe(_ => {\n        this.orderService.convertBasketItemsToOrderItemsOrder({ email: this.authService.currentUser?.email!, body: dto })\n          .subscribe(_ => {\n            this.basket = [];\n          }, err => this.handleError(err));\n      }, err => this.handleError(err));\n\n\n    \n  }\n\n  getTotalPayment(): number{\n    let total = 0;\n    for (let basketItem of this.basket) {\n      total += basketItem.amount! * basketItem.price!;\n    }\n    return total;\n  }\n\n  remove(index: number) {\n\n    let itemToRemove = this.basket[index];\n\n    if (this.currentUser.email) {\n      if (itemToRemove.basketItemId) {\n        this.basketItemService.removeBasketItemBasketItem({ email: this.currentUser.email, foodId: itemToRemove.foodId! })\n          .subscribe(\n            _ => { },\n            err => this.handleError(err)\n          );\n      }\n    }\n\n    this.basket.splice(index, 1);\n    this.foods.splice(index, 1);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}