{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../api/services/order.service\";\nimport * as i2 from \"../api/services\";\nimport * as i3 from \"./../auth/auth.service\";\nimport * as i4 from \"@angular/common\";\nfunction MyOrdersComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3)(2, \"div\", 4);\n    i0.ɵɵelement(3, \"img\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 6)(5, \"div\", 7)(6, \"h5\", 8);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"p\", 9);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\", 9)(11, \"small\", 10);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()()()()()();\n  }\n  if (rf & 2) {\n    const order_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"src\", ctx_r0.foods[i_r2].imageUrl, i0.ɵɵsanitizeUrl)(\"alt\", ctx_r0.foods[i_r2].name);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.foods[i_r2].name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.foods[i_r2].description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(order_r1.status);\n  }\n}\nexport class MyOrdersComponent {\n  constructor(orderService, foodService, authService) {\n    this.orderService = orderService;\n    this.foodService = foodService;\n    this.authService = authService;\n    this.orders = [];\n    this.foods = [];\n  }\n  //ngOnInit(): void {\n  //  console.log(this.authService.currentUser?.email);\n  //  this.orderService.listOrder({ email: this.authService.currentUser?.email ?? '' })\n  //    .subscribe(r => this.orders = r, this.handleError);\n  //  for (let order of this.orders) {\n  //    this.foodService.findFood({ id: order.foodId! })\n  //      .subscribe(r => this.foods.push(r),\n  //        err => this.handleError(err));\n  //  }\n  //  console.log(this.foods);\n  //  console.log(this.orders);\n  //}\n  ngOnInit() {\n    this.orderService.listOrder({\n      email: this.authService.currentUser?.email ?? ''\n    }).subscribe(orders => {\n      // Use forkJoin to process food requests sequentially\n      console.log(orders);\n      this.orders = orders;\n      const foodObservables = orders.map(order => this.foodService.findFood({\n        id: order.foodId\n      }));\n      forkJoin(foodObservables).subscribe(foods => {\n        // All food requests have completed here\n        this.foods = foods;\n        console.log(foods);\n      }, err => this.handleError(err));\n      this.orders = orders;\n    }, err => this.handleError(err));\n  }\n  handleError(err) {\n    console.log(\"Response Error, Status:\", err.status);\n    console.log(\"Response Error, Status Text:\", err.statusText);\n    console.log(err);\n  }\n}\nMyOrdersComponent.ɵfac = function MyOrdersComponent_Factory(t) {\n  return new (t || MyOrdersComponent)(i0.ɵɵdirectiveInject(i1.OrderService), i0.ɵɵdirectiveInject(i2.FoodService), i0.ɵɵdirectiveInject(i3.AuthService));\n};\nMyOrdersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MyOrdersComponent,\n  selectors: [[\"app-my-orders\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"container\"], [\"class\", \"card mb-3\", \"style\", \"max-width: 100%;\", 4, \"ngFor\", \"ngForOf\"], [1, \"card\", \"mb-3\", 2, \"max-width\", \"100%\"], [1, \"row\", \"g-0\"], [1, \"col-md-4\"], [1, \"img-fluid\", \"rounded-start\", 3, \"src\", \"alt\"], [1, \"col-md-8\"], [1, \"card-body\"], [1, \"card-title\"], [1, \"card-text\"], [1, \"text-muted\"]],\n  template: function MyOrdersComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, MyOrdersComponent_div_1_Template, 13, 5, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.orders);\n    }\n  },\n  dependencies: [i4.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAKA,SAASA,QAAQ,QAAQ,MAAM;;;;;;;;ICH3BC,8BACgD;IAGpCA,yBAAqF;IACzFA,iBAAM;IACNA,8BAAsB;IAEUA,YAAoB;IAAAA,iBAAK;IACjDA,4BAAqB;IAAAA,YAA0B;IAAAA,iBAAI;IACnDA,6BAAqB;IAA0BA,aAAkB;IAAAA,iBAAQ;;;;;;IANxEA,eAAyB;IAAzBA,mEAAyB;IAIFA,eAAoB;IAApBA,wDAAoB;IACvBA,eAA0B;IAA1BA,oDAA0B;IACAA,eAAkB;IAAlBA,qCAAkB;;;ADArF,OAAM,MAAOC,iBAAiB;EAK5BC,YAAoBC,YAA0B,EACpCC,WAAwB,EACxBC,WAAwB;IAFd,iBAAY,GAAZF,YAAY;IACtB,gBAAW,GAAXC,WAAW;IACX,gBAAW,GAAXC,WAAW;IALrB,WAAM,GAAc,EAAE;IACtB,UAAK,GAAa,EAAE;EAIkB;EAEtC;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EAGFC,QAAQ;IAEN,IAAI,CAACH,YAAY,CAACI,SAAS,CAAC;MAAEC,KAAK,EAAE,IAAI,CAACH,WAAW,CAACI,WAAW,EAAED,KAAK,IAAI;IAAE,CAAE,CAAC,CAC9EE,SAAS,CACPC,MAAM,IAAI;MACT;MACAC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACjB,IAAI,CAACA,MAAM,GAAGA,MAAM;MACpB,MAAMG,eAAe,GAAGH,MAAM,CAACI,GAAG,CAAEC,KAAK,IACzC,IAAI,CAACZ,WAAW,CAACa,QAAQ,CAAC;QAAEC,EAAE,EAAEF,KAAK,CAACG;MAAO,CAAE,CAAC,CACjD;MAEDpB,QAAQ,CAACe,eAAe,CAAC,CAACJ,SAAS,CAChCU,KAAK,IAAI;QACR;QACA,IAAI,CAACA,KAAK,GAAGA,KAAK;QAClBR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;MACpB,CAAC,EACAC,GAAG,IAAK,IAAI,CAACC,WAAW,CAACD,GAAG,CAAC,CAC/B;MAED,IAAI,CAACV,MAAM,GAAGA,MAAM;IACtB,CAAC,EACAU,GAAG,IAAK,IAAI,CAACC,WAAW,CAACD,GAAG,CAAC,CACjC;EACH;EAGUC,WAAW,CAACD,GAAQ;IAC1BT,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEQ,GAAG,CAACE,MAAM,CAAC;IAClDX,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEQ,GAAG,CAACG,UAAU,CAAC;IAC3DZ,OAAO,CAACC,GAAG,CAACQ,GAAG,CAAC;EAClB;;AA3DWpB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZ9B7B,8BAAuB;MAEnBA,mEAcM;MAEVA,iBAAM;;;MAhBwBA,eAAW;MAAXA,oCAAW","names":["forkJoin","i0","MyOrdersComponent","constructor","orderService","foodService","authService","ngOnInit","listOrder","email","currentUser","subscribe","orders","console","log","foodObservables","map","order","findFood","id","foodId","foods","err","handleError","status","statusText","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/my-orders/my-orders.component.ts","/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/my-orders/my-orders.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { OrderRm, FoodRm} from '../api/models';\nimport { FoodService } from '../api/services';\nimport { OrderService } from './../api/services/order.service';\nimport { AuthService } from './../auth/auth.service';\nimport { forkJoin } from 'rxjs';\n\n@Component({\n  selector: 'app-my-orders',\n  templateUrl: './my-orders.component.html',\n  styleUrls: ['./my-orders.component.css']\n})\nexport class MyOrdersComponent {\n\n  orders: OrderRm[] = [];\n  foods: FoodRm[] = [];\n\n  constructor(private orderService: OrderService,\n    private foodService: FoodService,\n    private authService: AuthService) { }\n\n  //ngOnInit(): void {\n  //  console.log(this.authService.currentUser?.email);\n\n  //  this.orderService.listOrder({ email: this.authService.currentUser?.email ?? '' })\n  //    .subscribe(r => this.orders = r, this.handleError);\n\n  //  for (let order of this.orders) {\n  //    this.foodService.findFood({ id: order.foodId! })\n  //      .subscribe(r => this.foods.push(r),\n  //        err => this.handleError(err));\n  //  }\n\n  //  console.log(this.foods);\n  //  console.log(this.orders);\n\n  //}\n\n\nngOnInit(): void {\n\n  this.orderService.listOrder({ email: this.authService.currentUser?.email ?? '' })\n    .subscribe(\n      (orders) => {\n        // Use forkJoin to process food requests sequentially\n        console.log(orders);\n          this.orders = orders;\n          const foodObservables = orders.map((order) =>\n          this.foodService.findFood({ id: order.foodId! })\n        );\n\n        forkJoin(foodObservables).subscribe(\n          (foods) => {\n            // All food requests have completed here\n            this.foods = foods;\n            console.log(foods);\n          },\n          (err) => this.handleError(err)\n        );\n\n        this.orders = orders;\n      },\n      (err) => this.handleError(err)\n  );\n}\n\n\n  private handleError(err: any) {\n    console.log(\"Response Error, Status:\", err.status);\n    console.log(\"Response Error, Status Text:\", err.statusText);\n    console.log(err);\n  }\n\n\n}\n","<div class=\"container\">\n\n    <div    *ngFor=\"let order of orders; let i = index\"\n         class=\"card mb-3\" style=\"max-width: 100%;\">\n        <div class=\"row g-0\">\n            <div class=\"col-md-4\">\n                <img [src]=\"foods[i].imageUrl\" class=\"img-fluid rounded-start\" [alt]=\"foods[i].name\">\n            </div>\n            <div class=\"col-md-8\">\n                <div class=\"card-body\">\n                    <h5 class=\"card-title\"> {{ foods[i].name }} </h5>\n                    <p class=\"card-text\">{{ foods[i].description }}</p>\n                    <p class=\"card-text\"><small class=\"text-muted\">{{ order.status }}</small></p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}