{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { searchFood } from '../fn/food/search-food';\nimport { searchFood$Plain } from '../fn/food/search-food-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FoodService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchFood()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFood$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Plain$Response(params, context) {\n    return searchFood$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFood$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Plain(params, context) {\n    return this.searchFood$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFood()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Response(params, context) {\n    return searchFood(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFood$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood(params, context) {\n    return this.searchFood$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFoodService.SearchFoodPath = '/Food';\nFoodService.ɵfac = function FoodService_Factory(t) {\n  return new (t || FoodService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFoodService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FoodService,\n  factory: FoodService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAK7C,SAASC,UAAU,QAAQ,wBAAwB;AAEnD,SAASC,gBAAgB,QAAQ,8BAA8B;;;;AAI/D,OAAM,MAAOC,WAAY,SAAQH,WAAW;EAC1CI,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,yBAAyB,CAACC,MAAgC,EAAEC,OAAqB;IAC/E,OAAOP,gBAAgB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACnE;EAEA;;;;;;EAMAP,gBAAgB,CAACM,MAAgC,EAAEC,OAAqB;IACtE,OAAO,IAAI,CAACF,yBAAyB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACzDZ,GAAG,CAAEa,CAAoC,IAAoBA,CAAC,CAACC,IAAI,CAAC,CACrE;EACH;EAEA;;;;;;EAMAC,mBAAmB,CAACN,MAA0B,EAAEC,OAAqB;IACnE,OAAOR,UAAU,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC7D;EAEA;;;;;;EAMAR,UAAU,CAACO,MAA0B,EAAEC,OAAqB;IAC1D,OAAO,IAAI,CAACK,mBAAmB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACnDZ,GAAG,CAAEa,CAAoC,IAAoBA,CAAC,CAACC,IAAI,CAAC,CACrE;EACH;;AAlDWV,WAAY,CAMPY,cAAc,GAAG,OAAO;AAN7BZ,WAAY;mBAAZA,WAAW;AAAA;AAAXA,WAAY;SAAZA,WAAW;EAAAa,SAAXb,WAAW;EAAAc,YADE;AAAM","names":["map","BaseService","searchFood","searchFood$Plain","FoodService","constructor","config","http","searchFood$Plain$Response","params","context","rootUrl","pipe","r","body","searchFood$Response","SearchFoodPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/services/food.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { FoodRm } from '../models/food-rm';\nimport { searchFood } from '../fn/food/search-food';\nimport { SearchFood$Params } from '../fn/food/search-food';\nimport { searchFood$Plain } from '../fn/food/search-food-plain';\nimport { SearchFood$Plain$Params } from '../fn/food/search-food-plain';\n\n@Injectable({ providedIn: 'root' })\nexport class FoodService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `searchFood()` */\n  static readonly SearchFoodPath = '/Food';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFood$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Plain$Response(params?: SearchFood$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FoodRm>>> {\n    return searchFood$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFood$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Plain(params?: SearchFood$Plain$Params, context?: HttpContext): Observable<Array<FoodRm>> {\n    return this.searchFood$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<FoodRm>>): Array<FoodRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFood()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Response(params?: SearchFood$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FoodRm>>> {\n    return searchFood(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFood$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood(params?: SearchFood$Params, context?: HttpContext): Observable<Array<FoodRm>> {\n    return this.searchFood$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<FoodRm>>): Array<FoodRm> => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}