{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { createFood } from '../fn/food/create-food';\nimport { createFood$Plain } from '../fn/food/create-food-plain';\nimport { deleteFood } from '../fn/food/delete-food';\nimport { editFood } from '../fn/food/edit-food';\nimport { editFood$Plain } from '../fn/food/edit-food-plain';\nimport { findFood } from '../fn/food/find-food';\nimport { findFood$Plain } from '../fn/food/find-food-plain';\nimport { getByCategoryIdFood } from '../fn/food/get-by-category-id-food';\nimport { getByCategoryIdFood$Plain } from '../fn/food/get-by-category-id-food-plain';\nimport { searchFood } from '../fn/food/search-food';\nimport { searchFood$Plain } from '../fn/food/search-food-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FoodService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchFood()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFood$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Plain$Response(params, context) {\n    return searchFood$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFood$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Plain(params, context) {\n    return this.searchFood$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFood()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Response(params, context) {\n    return searchFood(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFood$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood(params, context) {\n    return this.searchFood$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `createFood()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createFood$Plain()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createFood$Plain$Response(params, context) {\n    return createFood$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `createFood$Plain$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createFood$Plain(params, context) {\n    return this.createFood$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createFood()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createFood$Response(params, context) {\n    return createFood(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `createFood$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createFood(params, context) {\n    return this.createFood$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getByCategoryIdFood()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getByCategoryIdFood$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByCategoryIdFood$Plain$Response(params, context) {\n    return getByCategoryIdFood$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getByCategoryIdFood$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByCategoryIdFood$Plain(params, context) {\n    return this.getByCategoryIdFood$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getByCategoryIdFood()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByCategoryIdFood$Response(params, context) {\n    return getByCategoryIdFood(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getByCategoryIdFood$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByCategoryIdFood(params, context) {\n    return this.getByCategoryIdFood$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findFood()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findFood$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findFood$Plain$Response(params, context) {\n    return findFood$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findFood$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findFood$Plain(params, context) {\n    return this.findFood$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findFood()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findFood$Response(params, context) {\n    return findFood(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findFood$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findFood(params, context) {\n    return this.findFood$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `editFood()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `editFood$Plain()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  editFood$Plain$Response(params, context) {\n    return editFood$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `editFood$Plain$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  editFood$Plain(params, context) {\n    return this.editFood$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `editFood()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  editFood$Response(params, context) {\n    return editFood(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `editFood$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  editFood(params, context) {\n    return this.editFood$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `deleteFood()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteFood()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteFood$Response(params, context) {\n    return deleteFood(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `deleteFood$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteFood(params, context) {\n    return this.deleteFood$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFoodService.SearchFoodPath = '/Food';\nFoodService.CreateFoodPath = '/Food';\nFoodService.GetByCategoryIdFoodPath = '/Food/byCategory/{categoryId}';\nFoodService.FindFoodPath = '/Food/{id}';\nFoodService.EditFoodPath = '/Food/{id}';\nFoodService.DeleteFoodPath = '/Food/{id}';\nFoodService.ɵfac = function FoodService_Factory(t) {\n  return new (t || FoodService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFoodService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FoodService,\n  factory: FoodService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","BaseService","createFood","createFood$Plain","deleteFood","editFood","editFood$Plain","findFood","findFood$Plain","getByCategoryIdFood","getByCategoryIdFood$Plain","searchFood","searchFood$Plain","FoodService","constructor","config","http","searchFood$Plain$Response","params","context","rootUrl","pipe","r","body","searchFood$Response","createFood$Plain$Response","createFood$Response","getByCategoryIdFood$Plain$Response","getByCategoryIdFood$Response","findFood$Plain$Response","findFood$Response","editFood$Plain$Response","editFood$Response","deleteFood$Response","SearchFoodPath","CreateFoodPath","GetByCategoryIdFoodPath","FindFoodPath","EditFoodPath","DeleteFoodPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/services/food.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { createFood } from '../fn/food/create-food';\nimport { CreateFood$Params } from '../fn/food/create-food';\nimport { createFood$Plain } from '../fn/food/create-food-plain';\nimport { CreateFood$Plain$Params } from '../fn/food/create-food-plain';\nimport { deleteFood } from '../fn/food/delete-food';\nimport { DeleteFood$Params } from '../fn/food/delete-food';\nimport { editFood } from '../fn/food/edit-food';\nimport { EditFood$Params } from '../fn/food/edit-food';\nimport { editFood$Plain } from '../fn/food/edit-food-plain';\nimport { EditFood$Plain$Params } from '../fn/food/edit-food-plain';\nimport { findFood } from '../fn/food/find-food';\nimport { FindFood$Params } from '../fn/food/find-food';\nimport { findFood$Plain } from '../fn/food/find-food-plain';\nimport { FindFood$Plain$Params } from '../fn/food/find-food-plain';\nimport { FoodRm } from '../models/food-rm';\nimport { getByCategoryIdFood } from '../fn/food/get-by-category-id-food';\nimport { GetByCategoryIdFood$Params } from '../fn/food/get-by-category-id-food';\nimport { getByCategoryIdFood$Plain } from '../fn/food/get-by-category-id-food-plain';\nimport { GetByCategoryIdFood$Plain$Params } from '../fn/food/get-by-category-id-food-plain';\nimport { searchFood } from '../fn/food/search-food';\nimport { SearchFood$Params } from '../fn/food/search-food';\nimport { searchFood$Plain } from '../fn/food/search-food-plain';\nimport { SearchFood$Plain$Params } from '../fn/food/search-food-plain';\n\n@Injectable({ providedIn: 'root' })\nexport class FoodService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `searchFood()` */\n  static readonly SearchFoodPath = '/Food';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFood$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Plain$Response(params?: SearchFood$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FoodRm>>> {\n    return searchFood$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFood$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Plain(params?: SearchFood$Plain$Params, context?: HttpContext): Observable<Array<FoodRm>> {\n    return this.searchFood$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<FoodRm>>): Array<FoodRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchFood()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood$Response(params?: SearchFood$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FoodRm>>> {\n    return searchFood(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchFood$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchFood(params?: SearchFood$Params, context?: HttpContext): Observable<Array<FoodRm>> {\n    return this.searchFood$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<FoodRm>>): Array<FoodRm> => r.body)\n    );\n  }\n\n  /** Path part for operation `createFood()` */\n  static readonly CreateFoodPath = '/Food';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createFood$Plain()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createFood$Plain$Response(params?: CreateFood$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<FoodRm>> {\n    return createFood$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `createFood$Plain$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createFood$Plain(params?: CreateFood$Plain$Params, context?: HttpContext): Observable<FoodRm> {\n    return this.createFood$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<FoodRm>): FoodRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createFood()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createFood$Response(params?: CreateFood$Params, context?: HttpContext): Observable<StrictHttpResponse<FoodRm>> {\n    return createFood(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `createFood$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createFood(params?: CreateFood$Params, context?: HttpContext): Observable<FoodRm> {\n    return this.createFood$Response(params, context).pipe(\n      map((r: StrictHttpResponse<FoodRm>): FoodRm => r.body)\n    );\n  }\n\n  /** Path part for operation `getByCategoryIdFood()` */\n  static readonly GetByCategoryIdFoodPath = '/Food/byCategory/{categoryId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getByCategoryIdFood$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByCategoryIdFood$Plain$Response(params: GetByCategoryIdFood$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FoodRm>>> {\n    return getByCategoryIdFood$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getByCategoryIdFood$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByCategoryIdFood$Plain(params: GetByCategoryIdFood$Plain$Params, context?: HttpContext): Observable<Array<FoodRm>> {\n    return this.getByCategoryIdFood$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<FoodRm>>): Array<FoodRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getByCategoryIdFood()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByCategoryIdFood$Response(params: GetByCategoryIdFood$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FoodRm>>> {\n    return getByCategoryIdFood(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getByCategoryIdFood$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByCategoryIdFood(params: GetByCategoryIdFood$Params, context?: HttpContext): Observable<Array<FoodRm>> {\n    return this.getByCategoryIdFood$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<FoodRm>>): Array<FoodRm> => r.body)\n    );\n  }\n\n  /** Path part for operation `findFood()` */\n  static readonly FindFoodPath = '/Food/{id}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findFood$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findFood$Plain$Response(params: FindFood$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<FoodRm>> {\n    return findFood$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findFood$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findFood$Plain(params: FindFood$Plain$Params, context?: HttpContext): Observable<FoodRm> {\n    return this.findFood$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<FoodRm>): FoodRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findFood()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findFood$Response(params: FindFood$Params, context?: HttpContext): Observable<StrictHttpResponse<FoodRm>> {\n    return findFood(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findFood$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findFood(params: FindFood$Params, context?: HttpContext): Observable<FoodRm> {\n    return this.findFood$Response(params, context).pipe(\n      map((r: StrictHttpResponse<FoodRm>): FoodRm => r.body)\n    );\n  }\n\n  /** Path part for operation `editFood()` */\n  static readonly EditFoodPath = '/Food/{id}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `editFood$Plain()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  editFood$Plain$Response(params: EditFood$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<FoodRm>> {\n    return editFood$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `editFood$Plain$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  editFood$Plain(params: EditFood$Plain$Params, context?: HttpContext): Observable<FoodRm> {\n    return this.editFood$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<FoodRm>): FoodRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `editFood()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  editFood$Response(params: EditFood$Params, context?: HttpContext): Observable<StrictHttpResponse<FoodRm>> {\n    return editFood(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `editFood$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  editFood(params: EditFood$Params, context?: HttpContext): Observable<FoodRm> {\n    return this.editFood$Response(params, context).pipe(\n      map((r: StrictHttpResponse<FoodRm>): FoodRm => r.body)\n    );\n  }\n\n  /** Path part for operation `deleteFood()` */\n  static readonly DeleteFoodPath = '/Food/{id}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteFood()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteFood$Response(params: DeleteFood$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return deleteFood(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `deleteFood$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteFood(params: DeleteFood$Params, context?: HttpContext): Observable<void> {\n    return this.deleteFood$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}