{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../auth/auth.service\";\nimport * as i3 from \"../api/services\";\nimport * as i4 from \"@angular/forms\";\nexport class BuyFoodComponent {\n  constructor(route, router, authService, foodService, orderService, categoryService, fb) {\n    this.route = route;\n    this.router = router;\n    this.authService = authService;\n    this.foodService = foodService;\n    this.orderService = orderService;\n    this.categoryService = categoryService;\n    this.fb = fb;\n    this.foodId = 'not loaded';\n    this.food = {};\n    this.category = \"\";\n    this.form = this.fb.group({\n      number: [1, Validators.compose([Validators.required, Validators.min(1), Validators.max(10)])]\n    });\n    this.findFood = foodId => {\n      this.foodId = foodId ?? 'not passed';\n      this.foodService.findFood({\n        id: this.foodId\n      }).subscribe(food => {\n        this.food = food;\n        this.getCategory(this.food.categoryId);\n      }, err => this.handleError(err));\n    };\n    this.handleError = err => {\n      if (err.status == 404) {\n        alert(\"Food not found!\");\n        this.router.navigate(['/menu']);\n      }\n      if (err.status == 409) {\n        console.log(\"err: \" + err);\n        alert(JSON.parse(err.error).message);\n      }\n      console.log(\"Response Error. Status: \", err.status);\n      console.log(\"Response Error. Status Text: \", err.statusText);\n      console.log(err);\n    };\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(p => this.findFood(p.get(\"foodId\")));\n  }\n  buy() {\n    if (this.form.invalid) return;\n    // I will use Dto\n    // because it will be a post operation\n    const orderItem = {\n      address: this.authService.currentUser?.address,\n      amount: this.form.get('number')?.value,\n      foodId: this.food.id,\n      orderId: Date.now().toString(),\n      orderOwner: this.authService.currentUser?.email,\n      status: \"Your order has been received.\"\n    };\n    console.log(order);\n    this.orderService.buyOrder({\n      body: order\n    }).subscribe(_ => this.router.navigate(['/my-orders']), err => this.handleError(err));\n  }\n  get number() {\n    return this.form.controls.number;\n  }\n  getCategory(id) {\n    this.categoryService.findCategory({\n      id: id\n    }).subscribe(rm => this.category = rm.name, err => this.handleError(err));\n  }\n}\nBuyFoodComponent.ɵfac = function BuyFoodComponent_Factory(t) {\n  return new (t || BuyFoodComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.FoodService), i0.ɵɵdirectiveInject(i3.OrderService), i0.ɵɵdirectiveInject(i3.CategoryService), i0.ɵɵdirectiveInject(i4.FormBuilder));\n};\nBuyFoodComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BuyFoodComponent,\n  selectors: [[\"app-buy-food\"]],\n  decls: 1,\n  vars: 0,\n  consts: [[1, \"container\"]],\n  template: function BuyFoodComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n  },\n  styles: [\"button[_ngcontent-%COMP%] {\\n  background-color: #b1b2ff;\\n  color: white;\\n}\\n\\nbutton[_ngcontent-%COMP%]:hover {\\n    color: #b1b2ff;\\n    background-color: white;\\n    border: 1px solid #b1b2ff;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYnV5LWZvb2QvYnV5LWZvb2QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHlCQUF5QjtFQUN6QixZQUFZO0FBQ2Q7O0FBRUE7SUFDSSxjQUFjO0lBQ2QsdUJBQXVCO0lBQ3ZCLHlCQUF5QjtFQUMzQiIsInNvdXJjZXNDb250ZW50IjpbImJ1dHRvbiB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNiMWIyZmY7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxuYnV0dG9uOmhvdmVyIHtcbiAgICBjb2xvcjogI2IxYjJmZjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYjFiMmZmO1xuICB9XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","BuyFoodComponent","constructor","route","router","authService","foodService","orderService","categoryService","fb","group","number","compose","required","min","max","foodId","findFood","id","subscribe","food","getCategory","categoryId","err","handleError","status","alert","navigate","console","log","JSON","parse","error","message","statusText","ngOnInit","paramMap","p","get","buy","form","invalid","orderItem","address","currentUser","amount","value","orderId","Date","now","toString","orderOwner","email","order","buyOrder","body","_","controls","findCategory","rm","category","name","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/buy-food/buy-food.component.ts","/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/buy-food/buy-food.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CategoryService, FoodService, OrderService } from '../api/services';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FoodRm, OrderDto, OrderItem } from '../api/models';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../auth/auth.service';\n\n\n@Component({\n  selector: 'app-buy-food',\n  templateUrl: './buy-food.component.html',\n  styleUrls: ['./buy-food.component.css']\n})\nexport class BuyFoodComponent implements OnInit {\n\n  foodId: string = 'not loaded';\n  food: FoodRm = {};\n  category: string = \"\";\n\n\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    private foodService: FoodService,\n    private orderService: OrderService,\n    private categoryService: CategoryService,\n    private fb: FormBuilder  ) { }\n\n\n  form = this.fb.group({\n    number: [1, Validators.compose([Validators.required, Validators.min(1), Validators.max(10)])]\n  })\n\n  ngOnInit(): void {\n    this.route.paramMap\n      .subscribe(p => this.findFood(p.get(\"foodId\")))\n  }\n\n  private findFood = (foodId: string | null) => {\n    this.foodId = foodId ?? 'not passed';\n\n    this.foodService.findFood({ id: this.foodId })\n      .subscribe(\n        food => {\n          this.food = food\n          this.getCategory(this.food.categoryId!);\n        },\n        err => this.handleError(err)\n      );\n   }\n\n  private handleError = (err: any) => {\n\n    if (err.status == 404) {\n      alert(\"Food not found!\")\n      this.router.navigate(['/menu'])\n    }\n\n\n    if (err.status == 409) {\n      console.log(\"err: \" + err);\n      alert(JSON.parse(err.error).message)\n    }\n\n    console.log(\"Response Error. Status: \", err.status)\n    console.log(\"Response Error. Status Text: \", err.statusText)\n    console.log(err)\n  }\n\n  buy() {\n\n    if (this.form.invalid)\n      return;\n\n      // I will use Dto\n      // because it will be a post operation\n\n    const orderItem: OrderItem = {\n      address: this.authService.currentUser?.address!,\n      amount: this.form.get('number')?.value!,\n      foodId: this.food.id,\n      orderId: Date.now().toString(), // Using current timestamp as orderId\n      orderOwner: this.authService.currentUser?.email!,\n      status: \"Your order has been received.\"\n    }\n\n    console.log(order);\n\n    this.orderService.buyOrder({ body: order })\n      .subscribe(\n        _ => this.router.navigate(['/my-orders']),\n        err => this.handleError(err)\n      );\n\n  \n  }\n\n  get number() {\n    return this.form.controls.number\n  }\n\n  getCategory(id: number) {\n    this.categoryService.findCategory({ id: id })\n      .subscribe(rm => this.category = rm.name!,\n        err => this.handleError(err));\n  }\n}\n","<div class=\"container\">\n\n    <!--<div class=\"card mb-3\" style=\"max-width: 100%;\">\n        <div class=\"row g-0\">\n            <div class=\"col-md-4\">\n                <img [src]=\"food.imageUrl\" class=\"img-fluid rounded-start\" [alt]=\"food.name\">\n            </div>\n\n            <div class=\"col-md-8\">\n                <div class=\"card-body\">\n                    <h4 class=\"card-title\"> {{ category }} </h4>\n                    <h5 class=\"card-title\"> {{ food.name }} </h5>\n                    <p class=\"card-text\"> {{ food.description }} </p>\n                    <p class=\"card-text\"> It will be preperad in {{ food.preperationTime }} minutes </p>\n                    <p class=\"card-text\">  $ {{ food.price }} </p>\n                </div>\n\n                <div class=\"card-body\">\n                    <form [formGroup]=\"form\" (ngSubmit)=\"buy()\">\n                        <label class=\"form-label mt-5\" for=\"numberOfOrders\">Number of Orders</label>\n\n                        <input formControlName=\"number\"\n                               type=\"number\" class=\"form-control\"\n                               id=\"numberOfOrders\" name=\"numberOfOrders\"\n                               style=\"max-width: 30%;\"\n                               placeholder=\"Number of Orders\" />-->\n                        <!--<button type=\"submit\" class=\"btn\"\n                                style=\"width: 30%;\">\n                            <i class=\"fas fa-food\"></i>\n                            Add to basket\n                        </button>-->\n                    <!--</form>\n                    <div *ngIf=\"number.invalid && (number.dirty || number.touched)\" class=\"invalid-feedback d-block\">\n                        <div *ngIf=\"number.errors?.['required']\">\n                            How many servings do you want?\n                        </div>\n                        <div *ngIf=\"number.errors?.['min']\">\n                            You can not buy less than 1 serving!\n                        </div>\n                        <div *ngIf=\"number.errors?.['max']\">\n                            Our stocks do not have more than 10 servings.\n                        </div>\n                    </div>\n                </div>\n\n                \n\n            </div>\n\n\n            \n\n\n        </div>\n    </div>-->\n\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}