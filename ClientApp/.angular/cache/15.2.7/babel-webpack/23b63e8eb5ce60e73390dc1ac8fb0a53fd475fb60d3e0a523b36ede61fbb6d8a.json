{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { findUser } from '../fn/user/find-user';\nimport { findUser$Plain } from '../fn/user/find-user-plain';\nimport { registerUser } from '../fn/user/register-user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class UserService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `registerUser()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `registerUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  registerUser$Response(params, context) {\n    return registerUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `registerUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  registerUser(params, context) {\n    return this.registerUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findUser()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findUser$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Plain$Response(params, context) {\n    return findUser$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findUser$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Plain(params, context) {\n    return this.findUser$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Response(params, context) {\n    return findUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser(params, context) {\n    return this.findUser$Response(params, context).pipe(map(r => r.body));\n  }\n}\nUserService.RegisterUserPath = '/User';\nUserService.FindUserPath = '/User/{email}';\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,QAAQ,QAAQ,sBAAsB;AAE/C,SAASC,cAAc,QAAQ,4BAA4B;AAE3D,SAASC,YAAY,QAAQ,0BAA0B;;;;AAKvD,OAAM,MAAOC,WAAY,SAAQJ,WAAW;EAC1CK,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,qBAAqB,CAACC,MAA4B,EAAEC,OAAqB;IACvE,OAAOP,YAAY,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC/D;EAEA;;;;;;EAMAP,YAAY,CAACM,MAA4B,EAAEC,OAAqB;IAC9D,OAAO,IAAI,CAACF,qBAAqB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACrDb,GAAG,CAAEc,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAC,uBAAuB,CAACN,MAA6B,EAAEC,OAAqB;IAC1E,OAAOR,cAAc,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACjE;EAEA;;;;;;EAMAR,cAAc,CAACO,MAA6B,EAAEC,OAAqB;IACjE,OAAO,IAAI,CAACK,uBAAuB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACvDb,GAAG,CAAEc,CAA6B,IAAaA,CAAC,CAACC,IAAI,CAAC,CACvD;EACH;EAEA;;;;;;EAMAE,iBAAiB,CAACP,MAAuB,EAAEC,OAAqB;IAC9D,OAAOT,QAAQ,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC3D;EAEA;;;;;;EAMAT,QAAQ,CAACQ,MAAuB,EAAEC,OAAqB;IACrD,OAAO,IAAI,CAACM,iBAAiB,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACjDb,GAAG,CAAEc,CAA6B,IAAaA,CAAC,CAACC,IAAI,CAAC,CACvD;EACH;;AA3EWV,WAAY,CAMPa,gBAAgB,GAAG,OAAO;AAN/Bb,WAAY,CA+BPc,YAAY,GAAG,eAAe;AA/BnCd,WAAY;mBAAZA,WAAW;AAAA;AAAXA,WAAY;SAAZA,WAAW;EAAAe,SAAXf,WAAW;EAAAgB,YADE;AAAM","names":["map","BaseService","findUser","findUser$Plain","registerUser","UserService","constructor","config","http","registerUser$Response","params","context","rootUrl","pipe","r","body","findUser$Plain$Response","findUser$Response","RegisterUserPath","FindUserPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/services/user.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { findUser } from '../fn/user/find-user';\nimport { FindUser$Params } from '../fn/user/find-user';\nimport { findUser$Plain } from '../fn/user/find-user-plain';\nimport { FindUser$Plain$Params } from '../fn/user/find-user-plain';\nimport { registerUser } from '../fn/user/register-user';\nimport { RegisterUser$Params } from '../fn/user/register-user';\nimport { UserRm } from '../models/user-rm';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `registerUser()` */\n  static readonly RegisterUserPath = '/User';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `registerUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  registerUser$Response(params?: RegisterUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return registerUser(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `registerUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  registerUser(params?: RegisterUser$Params, context?: HttpContext): Observable<void> {\n    return this.registerUser$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `findUser()` */\n  static readonly FindUserPath = '/User/{email}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findUser$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Plain$Response(params: FindUser$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserRm>> {\n    return findUser$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findUser$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Plain(params: FindUser$Plain$Params, context?: HttpContext): Observable<UserRm> {\n    return this.findUser$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<UserRm>): UserRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Response(params: FindUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserRm>> {\n    return findUser(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser(params: FindUser$Params, context?: HttpContext): Observable<UserRm> {\n    return this.findUser$Response(params, context).pipe(\n      map((r: StrictHttpResponse<UserRm>): UserRm => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}