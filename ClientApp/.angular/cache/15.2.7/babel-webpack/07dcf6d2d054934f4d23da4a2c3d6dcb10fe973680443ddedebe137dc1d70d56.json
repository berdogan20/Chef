{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { createCategory } from '../fn/category/create-category';\nimport { createCategory$Plain } from '../fn/category/create-category-plain';\nimport { findCategory } from '../fn/category/find-category';\nimport { findCategory$Plain } from '../fn/category/find-category-plain';\nimport { getAllCategoriesCategory } from '../fn/category/get-all-categories-category';\nimport { getAllCategoriesCategory$Plain } from '../fn/category/get-all-categories-category-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class CategoryService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `findCategory()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findCategory$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findCategory$Plain$Response(params, context) {\n    return findCategory$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findCategory$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findCategory$Plain(params, context) {\n    return this.findCategory$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findCategory()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findCategory$Response(params, context) {\n    return findCategory(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findCategory$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findCategory(params, context) {\n    return this.findCategory$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getAllCategoriesCategory()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllCategoriesCategory$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllCategoriesCategory$Plain$Response(params, context) {\n    return getAllCategoriesCategory$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllCategoriesCategory$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllCategoriesCategory$Plain(params, context) {\n    return this.getAllCategoriesCategory$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllCategoriesCategory()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllCategoriesCategory$Response(params, context) {\n    return getAllCategoriesCategory(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllCategoriesCategory$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllCategoriesCategory(params, context) {\n    return this.getAllCategoriesCategory$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `createCategory()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createCategory$Plain()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createCategory$Plain$Response(params, context) {\n    return createCategory$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `createCategory$Plain$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createCategory$Plain(params, context) {\n    return this.createCategory$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createCategory()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createCategory$Response(params, context) {\n    return createCategory(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `createCategory$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createCategory(params, context) {\n    return this.createCategory$Response(params, context).pipe(map(r => r.body));\n  }\n}\nCategoryService.FindCategoryPath = '/Category/{id}';\nCategoryService.GetAllCategoriesCategoryPath = '/Category';\nCategoryService.CreateCategoryPath = '/Category';\nCategoryService.ɵfac = function CategoryService_Factory(t) {\n  return new (t || CategoryService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nCategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoryService,\n  factory: CategoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","BaseService","createCategory","createCategory$Plain","findCategory","findCategory$Plain","getAllCategoriesCategory","getAllCategoriesCategory$Plain","CategoryService","constructor","config","http","findCategory$Plain$Response","params","context","rootUrl","pipe","r","body","findCategory$Response","getAllCategoriesCategory$Plain$Response","getAllCategoriesCategory$Response","createCategory$Plain$Response","createCategory$Response","FindCategoryPath","GetAllCategoriesCategoryPath","CreateCategoryPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/services/category.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { CategoryRm } from '../models/category-rm';\nimport { createCategory } from '../fn/category/create-category';\nimport { CreateCategory$Params } from '../fn/category/create-category';\nimport { createCategory$Plain } from '../fn/category/create-category-plain';\nimport { CreateCategory$Plain$Params } from '../fn/category/create-category-plain';\nimport { findCategory } from '../fn/category/find-category';\nimport { FindCategory$Params } from '../fn/category/find-category';\nimport { findCategory$Plain } from '../fn/category/find-category-plain';\nimport { FindCategory$Plain$Params } from '../fn/category/find-category-plain';\nimport { getAllCategoriesCategory } from '../fn/category/get-all-categories-category';\nimport { GetAllCategoriesCategory$Params } from '../fn/category/get-all-categories-category';\nimport { getAllCategoriesCategory$Plain } from '../fn/category/get-all-categories-category-plain';\nimport { GetAllCategoriesCategory$Plain$Params } from '../fn/category/get-all-categories-category-plain';\n\n@Injectable({ providedIn: 'root' })\nexport class CategoryService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `findCategory()` */\n  static readonly FindCategoryPath = '/Category/{id}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findCategory$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findCategory$Plain$Response(params: FindCategory$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryRm>> {\n    return findCategory$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findCategory$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findCategory$Plain(params: FindCategory$Plain$Params, context?: HttpContext): Observable<CategoryRm> {\n    return this.findCategory$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<CategoryRm>): CategoryRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findCategory()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findCategory$Response(params: FindCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryRm>> {\n    return findCategory(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findCategory$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findCategory(params: FindCategory$Params, context?: HttpContext): Observable<CategoryRm> {\n    return this.findCategory$Response(params, context).pipe(\n      map((r: StrictHttpResponse<CategoryRm>): CategoryRm => r.body)\n    );\n  }\n\n  /** Path part for operation `getAllCategoriesCategory()` */\n  static readonly GetAllCategoriesCategoryPath = '/Category';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllCategoriesCategory$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllCategoriesCategory$Plain$Response(params?: GetAllCategoriesCategory$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CategoryRm>>> {\n    return getAllCategoriesCategory$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllCategoriesCategory$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllCategoriesCategory$Plain(params?: GetAllCategoriesCategory$Plain$Params, context?: HttpContext): Observable<Array<CategoryRm>> {\n    return this.getAllCategoriesCategory$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<CategoryRm>>): Array<CategoryRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllCategoriesCategory()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllCategoriesCategory$Response(params?: GetAllCategoriesCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CategoryRm>>> {\n    return getAllCategoriesCategory(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllCategoriesCategory$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllCategoriesCategory(params?: GetAllCategoriesCategory$Params, context?: HttpContext): Observable<Array<CategoryRm>> {\n    return this.getAllCategoriesCategory$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<CategoryRm>>): Array<CategoryRm> => r.body)\n    );\n  }\n\n  /** Path part for operation `createCategory()` */\n  static readonly CreateCategoryPath = '/Category';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createCategory$Plain()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createCategory$Plain$Response(params?: CreateCategory$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryRm>> {\n    return createCategory$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `createCategory$Plain$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createCategory$Plain(params?: CreateCategory$Plain$Params, context?: HttpContext): Observable<CategoryRm> {\n    return this.createCategory$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<CategoryRm>): CategoryRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createCategory()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createCategory$Response(params?: CreateCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryRm>> {\n    return createCategory(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `createCategory$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  createCategory(params?: CreateCategory$Params, context?: HttpContext): Observable<CategoryRm> {\n    return this.createCategory$Response(params, context).pipe(\n      map((r: StrictHttpResponse<CategoryRm>): CategoryRm => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}