{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet BuyFoodComponent = class BuyFoodComponent {\n  constructor(route, router, authService, foodService, orderService, categoryService, fb) {\n    this.route = route;\n    this.router = router;\n    this.authService = authService;\n    this.foodService = foodService;\n    this.orderService = orderService;\n    this.categoryService = categoryService;\n    this.fb = fb;\n    this.foodId = 'not loaded';\n    this.food = {};\n    this.category = \"\";\n    this.form = this.fb.group({\n      number: [1, Validators.compose([Validators.required, Validators.min(1), Validators.max(10)])]\n    });\n    this.findFood = foodId => {\n      this.foodId = foodId ?? 'not passed';\n      this.foodService.findFood({\n        id: this.foodId\n      }).subscribe(food => this.food = food, err => this.handleError(err));\n      console.log(this.foodId);\n    };\n    this.handleError = err => {\n      if (err.status == 404) {\n        alert(\"Food not found!\");\n        this.router.navigate(['/menu']);\n      }\n      if (err.status == 409) {\n        console.log(\"err: \" + err);\n        alert(JSON.parse(err.error).message);\n      }\n      console.log(\"Response Error. Status: \", err.status);\n      console.log(\"Response Error. Status Text: \", err.statusText);\n      console.log(err);\n    };\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(p => this.findFood(p.get(\"foodId\")));\n  }\n  buy() {\n    if (this.form.invalid) return;\n    // I will use Dto\n    // because it will be a post operation\n    const order = {\n      address: this.authService.currentUser?.address,\n      amount: this.form.get('number')?.value,\n      foodId: this.food.id,\n      orderId: Date.now().toString(),\n      orderOwner: this.authService.currentUser?.email,\n      status: \"Your order has been received.\"\n    };\n    console.log(order);\n    this.orderService.buyOrder({\n      body: order\n    }).subscribe(_ => this.router.navigate(['/my-orders']), err => this.handleError(err));\n  }\n  get number() {\n    return this.form.controls.number;\n  }\n  getCategory(id) {\n    this.categoryService.findCategory({\n      id: id\n    }).subscribe(rm => this.category = rm.name, err => this.handleError(err));\n  }\n};\nBuyFoodComponent = __decorate([Component({\n  selector: 'app-buy-food',\n  templateUrl: './buy-food.component.html',\n  styleUrls: ['./buy-food.component.css']\n})], BuyFoodComponent);\nexport { BuyFoodComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","BuyFoodComponent","constructor","route","router","authService","foodService","orderService","categoryService","fb","group","number","compose","required","min","max","foodId","findFood","id","subscribe","food","err","handleError","console","log","status","alert","navigate","JSON","parse","error","message","statusText","ngOnInit","paramMap","p","get","buy","form","invalid","order","address","currentUser","amount","value","orderId","Date","now","toString","orderOwner","email","buyOrder","body","_","controls","getCategory","findCategory","rm","category","name","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/buy-food/buy-food.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CategoryService, FoodService, OrderService } from '../api/services';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FoodRm, OrderDto } from '../api/models';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../auth/auth.service';\n\n\n@Component({\n  selector: 'app-buy-food',\n  templateUrl: './buy-food.component.html',\n  styleUrls: ['./buy-food.component.css']\n})\nexport class BuyFoodComponent implements OnInit {\n\n  foodId: string = 'not loaded';\n  food: FoodRm = {};\n  category: string = \"\";\n\n\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    private foodService: FoodService,\n    private orderService: OrderService,\n    private categoryService: CategoryService,\n    private fb: FormBuilder  ) { }\n\n\n  form = this.fb.group({\n    number: [1, Validators.compose([Validators.required, Validators.min(1), Validators.max(10)])]\n  })\n\n  ngOnInit(): void {\n    this.route.paramMap\n      .subscribe(p => this.findFood(p.get(\"foodId\")))\n  }\n\n  private findFood = (foodId: string | null) => {\n    this.foodId = foodId ?? 'not passed';\n\n    this.foodService.findFood({ id: this.foodId })\n      .subscribe(\n        food => this.food = food,\n        err => this.handleError(err)\n      );\n\n    console.log(this.foodId)\n   }\n\n  private handleError = (err: any) => {\n\n    if (err.status == 404) {\n      alert(\"Food not found!\")\n      this.router.navigate(['/menu'])\n    }\n\n\n    if (err.status == 409) {\n      console.log(\"err: \" + err);\n      alert(JSON.parse(err.error).message)\n    }\n\n    console.log(\"Response Error. Status: \", err.status)\n    console.log(\"Response Error. Status Text: \", err.statusText)\n    console.log(err)\n  }\n\n  buy() {\n\n    if (this.form.invalid)\n      return;\n\n      // I will use Dto\n      // because it will be a post operation\n\n    const order: OrderDto = {\n      address: this.authService.currentUser?.address!,\n      amount: this.form.get('number')?.value!,\n      foodId: this.food.id,\n      orderId: Date.now().toString(), // Using current timestamp as orderId\n      orderOwner: this.authService.currentUser?.email!,\n      status: \"Your order has been received.\"\n    }\n\n    console.log(order);\n\n    this.orderService.buyOrder({ body: order })\n      .subscribe(\n        _ => this.router.navigate(['/my-orders']),\n        err => this.handleError(err)\n      );\n\n  \n  }\n\n  get number() {\n    return this.form.controls.number\n  }\n\n  getCategory(id: number) {\n    this.categoryService.findCategory({ id: id })\n      .subscribe(rm => this.category = rm.name!,\n        err => this.handleError(err));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}