{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { addToBasketUser } from '../fn/user/add-to-basket-user';\nimport { clearUserBasketUser } from '../fn/user/clear-user-basket-user';\nimport { findUser } from '../fn/user/find-user';\nimport { findUser$Plain } from '../fn/user/find-user-plain';\nimport { getUserBasketUser } from '../fn/user/get-user-basket-user';\nimport { getUserBasketUser$Plain } from '../fn/user/get-user-basket-user-plain';\nimport { registerUser } from '../fn/user/register-user';\nimport { removeFromBasketUser } from '../fn/user/remove-from-basket-user';\nimport { searchUser } from '../fn/user/search-user';\nimport { searchUser$Plain } from '../fn/user/search-user-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class UserService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchUser()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchUser$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchUser$Plain$Response(params, context) {\n    return searchUser$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchUser$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchUser$Plain(params, context) {\n    return this.searchUser$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchUser$Response(params, context) {\n    return searchUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchUser(params, context) {\n    return this.searchUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `registerUser()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `registerUser()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  registerUser$Response(params, context) {\n    return registerUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `registerUser$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  registerUser(params, context) {\n    return this.registerUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findUser()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findUser$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Plain$Response(params, context) {\n    return findUser$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findUser$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Plain(params, context) {\n    return this.findUser$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Response(params, context) {\n    return findUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser(params, context) {\n    return this.findUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getUserBasketUser()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getUserBasketUser$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUserBasketUser$Plain$Response(params, context) {\n    return getUserBasketUser$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getUserBasketUser$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUserBasketUser$Plain(params, context) {\n    return this.getUserBasketUser$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getUserBasketUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUserBasketUser$Response(params, context) {\n    return getUserBasketUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getUserBasketUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUserBasketUser(params, context) {\n    return this.getUserBasketUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `addToBasketUser()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addToBasketUser()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  addToBasketUser$Response(params, context) {\n    return addToBasketUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `addToBasketUser$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  addToBasketUser(params, context) {\n    return this.addToBasketUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `clearUserBasketUser()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `clearUserBasketUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  clearUserBasketUser$Response(params, context) {\n    return clearUserBasketUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `clearUserBasketUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  clearUserBasketUser(params, context) {\n    return this.clearUserBasketUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `removeFromBasketUser()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `removeFromBasketUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeFromBasketUser$Response(params, context) {\n    return removeFromBasketUser(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `removeFromBasketUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeFromBasketUser(params, context) {\n    return this.removeFromBasketUser$Response(params, context).pipe(map(r => r.body));\n  }\n}\nUserService.SearchUserPath = '/User';\nUserService.RegisterUserPath = '/User';\nUserService.FindUserPath = '/User/{email}';\nUserService.GetUserBasketUserPath = '/User/{email}/basket';\nUserService.AddToBasketUserPath = '/User/{email}/basket';\nUserService.ClearUserBasketUserPath = '/User/{email}/basket';\nUserService.RemoveFromBasketUserPath = '/User/{email}/basket/{orderItemId}';\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,eAAe,QAAQ,+BAA+B;AAE/D,SAASC,mBAAmB,QAAQ,mCAAmC;AAEvE,SAASC,QAAQ,QAAQ,sBAAsB;AAE/C,SAASC,cAAc,QAAQ,4BAA4B;AAE3D,SAASC,iBAAiB,QAAQ,iCAAiC;AAEnE,SAASC,uBAAuB,QAAQ,uCAAuC;AAG/E,SAASC,YAAY,QAAQ,0BAA0B;AAEvD,SAASC,oBAAoB,QAAQ,oCAAoC;AAEzE,SAASC,UAAU,QAAQ,wBAAwB;AAEnD,SAASC,gBAAgB,QAAQ,8BAA8B;;;;AAK/D,OAAM,MAAOC,WAAY,SAAQX,WAAW;EAC1CY,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,yBAAyB,CAACC,MAAgC,EAAEC,OAAqB;IAC/E,OAAOP,gBAAgB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACnE;EAEA;;;;;;EAMAP,gBAAgB,CAACM,MAAgC,EAAEC,OAAqB;IACtE,OAAO,IAAI,CAACF,yBAAyB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACzDpB,GAAG,CAAEqB,CAAoC,IAAoBA,CAAC,CAACC,IAAI,CAAC,CACrE;EACH;EAEA;;;;;;EAMAC,mBAAmB,CAACN,MAA0B,EAAEC,OAAqB;IACnE,OAAOR,UAAU,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC7D;EAEA;;;;;;EAMAR,UAAU,CAACO,MAA0B,EAAEC,OAAqB;IAC1D,OAAO,IAAI,CAACK,mBAAmB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACnDpB,GAAG,CAAEqB,CAAoC,IAAoBA,CAAC,CAACC,IAAI,CAAC,CACrE;EACH;EAEA;;EAGA;;;;;;EAMAE,qBAAqB,CAACP,MAA4B,EAAEC,OAAqB;IACvE,OAAOV,YAAY,CAAC,IAAI,CAACO,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC/D;EAEA;;;;;;EAMAV,YAAY,CAACS,MAA4B,EAAEC,OAAqB;IAC9D,OAAO,IAAI,CAACM,qBAAqB,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACrDpB,GAAG,CAAEqB,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAG,uBAAuB,CAACR,MAA6B,EAAEC,OAAqB;IAC1E,OAAOb,cAAc,CAAC,IAAI,CAACU,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACjE;EAEA;;;;;;EAMAb,cAAc,CAACY,MAA6B,EAAEC,OAAqB;IACjE,OAAO,IAAI,CAACO,uBAAuB,CAACR,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACvDpB,GAAG,CAAEqB,CAA6B,IAAaA,CAAC,CAACC,IAAI,CAAC,CACvD;EACH;EAEA;;;;;;EAMAI,iBAAiB,CAACT,MAAuB,EAAEC,OAAqB;IAC9D,OAAOd,QAAQ,CAAC,IAAI,CAACW,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC3D;EAEA;;;;;;EAMAd,QAAQ,CAACa,MAAuB,EAAEC,OAAqB;IACrD,OAAO,IAAI,CAACQ,iBAAiB,CAACT,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACjDpB,GAAG,CAAEqB,CAA6B,IAAaA,CAAC,CAACC,IAAI,CAAC,CACvD;EACH;EAEA;;EAGA;;;;;;EAMAK,gCAAgC,CAACV,MAAsC,EAAEC,OAAqB;IAC5F,OAAOX,uBAAuB,CAAC,IAAI,CAACQ,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC1E;EAEA;;;;;;EAMAX,uBAAuB,CAACU,MAAsC,EAAEC,OAAqB;IACnF,OAAO,IAAI,CAACS,gCAAgC,CAACV,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAChEpB,GAAG,CAAEqB,CAAuC,IAAuBA,CAAC,CAACC,IAAI,CAAC,CAC3E;EACH;EAEA;;;;;;EAMAM,0BAA0B,CAACX,MAAgC,EAAEC,OAAqB;IAChF,OAAOZ,iBAAiB,CAAC,IAAI,CAACS,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACpE;EAEA;;;;;;EAMAZ,iBAAiB,CAACW,MAAgC,EAAEC,OAAqB;IACvE,OAAO,IAAI,CAACU,0BAA0B,CAACX,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC1DpB,GAAG,CAAEqB,CAAuC,IAAuBA,CAAC,CAACC,IAAI,CAAC,CAC3E;EACH;EAEA;;EAGA;;;;;;EAMAO,wBAAwB,CAACZ,MAA8B,EAAEC,OAAqB;IAC5E,OAAOhB,eAAe,CAAC,IAAI,CAACa,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAClE;EAEA;;;;;;EAMAhB,eAAe,CAACe,MAA8B,EAAEC,OAAqB;IACnE,OAAO,IAAI,CAACW,wBAAwB,CAACZ,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACxDpB,GAAG,CAAEqB,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAQ,4BAA4B,CAACb,MAAkC,EAAEC,OAAqB;IACpF,OAAOf,mBAAmB,CAAC,IAAI,CAACY,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACtE;EAEA;;;;;;EAMAf,mBAAmB,CAACc,MAAkC,EAAEC,OAAqB;IAC3E,OAAO,IAAI,CAACY,4BAA4B,CAACb,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC5DpB,GAAG,CAAEqB,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAS,6BAA6B,CAACd,MAAmC,EAAEC,OAAqB;IACtF,OAAOT,oBAAoB,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACvE;EAEA;;;;;;EAMAT,oBAAoB,CAACQ,MAAmC,EAAEC,OAAqB;IAC7E,OAAO,IAAI,CAACa,6BAA6B,CAACd,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC7DpB,GAAG,CAAEqB,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;;AApPWV,WAAY,CAMPoB,cAAc,GAAG,OAAO;AAN7BpB,WAAY,CAqDPqB,gBAAgB,GAAG,OAAO;AArD/BrB,WAAY,CA8EPsB,YAAY,GAAG,eAAe;AA9EnCtB,WAAY,CA6HPuB,qBAAqB,GAAG,sBAAsB;AA7HnDvB,WAAY,CA4KPwB,mBAAmB,GAAG,sBAAsB;AA5KjDxB,WAAY,CAqMPyB,uBAAuB,GAAG,sBAAsB;AArMrDzB,WAAY,CA8NP0B,wBAAwB,GAAG,oCAAoC;AA9NpE1B,WAAY;mBAAZA,WAAW;AAAA;AAAXA,WAAY;SAAZA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YADE;AAAM","names":["map","BaseService","addToBasketUser","clearUserBasketUser","findUser","findUser$Plain","getUserBasketUser","getUserBasketUser$Plain","registerUser","removeFromBasketUser","searchUser","searchUser$Plain","UserService","constructor","config","http","searchUser$Plain$Response","params","context","rootUrl","pipe","r","body","searchUser$Response","registerUser$Response","findUser$Plain$Response","findUser$Response","getUserBasketUser$Plain$Response","getUserBasketUser$Response","addToBasketUser$Response","clearUserBasketUser$Response","removeFromBasketUser$Response","SearchUserPath","RegisterUserPath","FindUserPath","GetUserBasketUserPath","AddToBasketUserPath","ClearUserBasketUserPath","RemoveFromBasketUserPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/services/user.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { addToBasketUser } from '../fn/user/add-to-basket-user';\nimport { AddToBasketUser$Params } from '../fn/user/add-to-basket-user';\nimport { clearUserBasketUser } from '../fn/user/clear-user-basket-user';\nimport { ClearUserBasketUser$Params } from '../fn/user/clear-user-basket-user';\nimport { findUser } from '../fn/user/find-user';\nimport { FindUser$Params } from '../fn/user/find-user';\nimport { findUser$Plain } from '../fn/user/find-user-plain';\nimport { FindUser$Plain$Params } from '../fn/user/find-user-plain';\nimport { getUserBasketUser } from '../fn/user/get-user-basket-user';\nimport { GetUserBasketUser$Params } from '../fn/user/get-user-basket-user';\nimport { getUserBasketUser$Plain } from '../fn/user/get-user-basket-user-plain';\nimport { GetUserBasketUser$Plain$Params } from '../fn/user/get-user-basket-user-plain';\nimport { OrderItem } from '../models/order-item';\nimport { registerUser } from '../fn/user/register-user';\nimport { RegisterUser$Params } from '../fn/user/register-user';\nimport { removeFromBasketUser } from '../fn/user/remove-from-basket-user';\nimport { RemoveFromBasketUser$Params } from '../fn/user/remove-from-basket-user';\nimport { searchUser } from '../fn/user/search-user';\nimport { SearchUser$Params } from '../fn/user/search-user';\nimport { searchUser$Plain } from '../fn/user/search-user-plain';\nimport { SearchUser$Plain$Params } from '../fn/user/search-user-plain';\nimport { UserRm } from '../models/user-rm';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `searchUser()` */\n  static readonly SearchUserPath = '/User';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchUser$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchUser$Plain$Response(params?: SearchUser$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserRm>>> {\n    return searchUser$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchUser$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchUser$Plain(params?: SearchUser$Plain$Params, context?: HttpContext): Observable<Array<UserRm>> {\n    return this.searchUser$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<UserRm>>): Array<UserRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchUser$Response(params?: SearchUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserRm>>> {\n    return searchUser(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchUser(params?: SearchUser$Params, context?: HttpContext): Observable<Array<UserRm>> {\n    return this.searchUser$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<UserRm>>): Array<UserRm> => r.body)\n    );\n  }\n\n  /** Path part for operation `registerUser()` */\n  static readonly RegisterUserPath = '/User';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `registerUser()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  registerUser$Response(params?: RegisterUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return registerUser(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `registerUser$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  registerUser(params?: RegisterUser$Params, context?: HttpContext): Observable<void> {\n    return this.registerUser$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `findUser()` */\n  static readonly FindUserPath = '/User/{email}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findUser$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Plain$Response(params: FindUser$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserRm>> {\n    return findUser$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findUser$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Plain(params: FindUser$Plain$Params, context?: HttpContext): Observable<UserRm> {\n    return this.findUser$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<UserRm>): UserRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser$Response(params: FindUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserRm>> {\n    return findUser(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findUser(params: FindUser$Params, context?: HttpContext): Observable<UserRm> {\n    return this.findUser$Response(params, context).pipe(\n      map((r: StrictHttpResponse<UserRm>): UserRm => r.body)\n    );\n  }\n\n  /** Path part for operation `getUserBasketUser()` */\n  static readonly GetUserBasketUserPath = '/User/{email}/basket';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getUserBasketUser$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUserBasketUser$Plain$Response(params: GetUserBasketUser$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderItem>>> {\n    return getUserBasketUser$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getUserBasketUser$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUserBasketUser$Plain(params: GetUserBasketUser$Plain$Params, context?: HttpContext): Observable<Array<OrderItem>> {\n    return this.getUserBasketUser$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<OrderItem>>): Array<OrderItem> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getUserBasketUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUserBasketUser$Response(params: GetUserBasketUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderItem>>> {\n    return getUserBasketUser(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getUserBasketUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getUserBasketUser(params: GetUserBasketUser$Params, context?: HttpContext): Observable<Array<OrderItem>> {\n    return this.getUserBasketUser$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<OrderItem>>): Array<OrderItem> => r.body)\n    );\n  }\n\n  /** Path part for operation `addToBasketUser()` */\n  static readonly AddToBasketUserPath = '/User/{email}/basket';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addToBasketUser()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  addToBasketUser$Response(params: AddToBasketUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return addToBasketUser(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `addToBasketUser$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  addToBasketUser(params: AddToBasketUser$Params, context?: HttpContext): Observable<void> {\n    return this.addToBasketUser$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `clearUserBasketUser()` */\n  static readonly ClearUserBasketUserPath = '/User/{email}/basket';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `clearUserBasketUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  clearUserBasketUser$Response(params: ClearUserBasketUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return clearUserBasketUser(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `clearUserBasketUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  clearUserBasketUser(params: ClearUserBasketUser$Params, context?: HttpContext): Observable<void> {\n    return this.clearUserBasketUser$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `removeFromBasketUser()` */\n  static readonly RemoveFromBasketUserPath = '/User/{email}/basket/{orderItemId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `removeFromBasketUser()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeFromBasketUser$Response(params: RemoveFromBasketUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return removeFromBasketUser(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `removeFromBasketUser$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeFromBasketUser(params: RemoveFromBasketUser$Params, context?: HttpContext): Observable<void> {\n    return this.removeFromBasketUser$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}