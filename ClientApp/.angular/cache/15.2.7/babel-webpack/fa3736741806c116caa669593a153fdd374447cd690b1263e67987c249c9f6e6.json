{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../api/services/order.service\";\nimport * as i2 from \"../api/services\";\nimport * as i3 from \"./../auth/auth.service\";\nexport class OrdersComponent {\n  constructor(orderService, foodService, authService) {\n    this.orderService = orderService;\n    this.foodService = foodService;\n    this.authService = authService;\n    this.orders = [];\n    this.foods = [];\n  }\n  ngOnInit() {\n    this.orderService.searchOrder({}).subscribe(orders => {\n      this.orders = orders;\n      // Fetch food data for each order\n      const foodObservables = orders.map(order => this.foodService.findFood({\n        id: order.foodId\n      }));\n      forkJoin(foodObservables).subscribe(foods => {\n        // All food requests have completed here\n        this.foods = foods;\n      }, err => this.handleError(err));\n    }, err => this.handleError(err));\n  }\n  //search() {\n  //  this.orderService.searchOrder({})\n  //    .subscribe(rmList => this.orders = rmList,\n  //      this.handleError)\n  //}\n  handleError(err) {\n    console.log(\"Response Error, Status:\", err.status);\n    console.log(\"Response Error, Status Text:\", err.statusText);\n    console.log(err);\n  }\n}\nOrdersComponent.ɵfac = function OrdersComponent_Factory(t) {\n  return new (t || OrdersComponent)(i0.ɵɵdirectiveInject(i1.OrderService), i0.ɵɵdirectiveInject(i2.FoodService), i0.ɵɵdirectiveInject(i3.AuthService));\n};\nOrdersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: OrdersComponent,\n  selectors: [[\"app-orders\"]],\n  decls: 1,\n  vars: 0,\n  consts: [[1, \"container\"]],\n  template: function OrdersComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAKA,SAASA,QAAQ,QAAQ,MAAM;;;;;AAQ/B,OAAM,MAAOC,eAAe;EAK1BC,YAAoBC,YAA0B,EACpCC,WAAwB,EACxBC,WAAwB;IAFd,iBAAY,GAAZF,YAAY;IACtB,gBAAW,GAAXC,WAAW;IACX,gBAAW,GAAXC,WAAW;IALrB,WAAM,GAAc,EAAE;IACtB,UAAK,GAAa,EAAE;EAIkB;EAEtCC,QAAQ;IAEN,IAAI,CAACH,YAAY,CAACI,WAAW,CAAC,EAAG,CAAC,CAC/BC,SAAS,CACPC,MAAM,IAAI;MACT,IAAI,CAACA,MAAM,GAAGA,MAAM;MAEpB;MACA,MAAMC,eAAe,GAAGD,MAAM,CAACE,GAAG,CAAEC,KAAK,IACvC,IAAI,CAACR,WAAW,CAACS,QAAQ,CAAC;QAAEC,EAAE,EAAEF,KAAK,CAACG;MAAO,CAAE,CAAC,CACjD;MAEDf,QAAQ,CAACU,eAAe,CAAC,CAACF,SAAS,CAChCQ,KAAK,IAAI;QACR;QACA,IAAI,CAACA,KAAK,GAAGA,KAAK;MACpB,CAAC,EACAC,GAAG,IAAK,IAAI,CAACC,WAAW,CAACD,GAAG,CAAC,CAC/B;IACH,CAAC,EACAA,GAAG,IAAK,IAAI,CAACC,WAAW,CAACD,GAAG,CAAC,CAC/B;EACL;EAEA;EACA;EACA;EACA;EACA;EAIQC,WAAW,CAACD,GAAQ;IAC1BE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,GAAG,CAACI,MAAM,CAAC;IAClDF,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,GAAG,CAACK,UAAU,CAAC;IAC3DH,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;EAClB;;AA7CWhB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCb5BC,yBA6BM","names":["forkJoin","OrdersComponent","constructor","orderService","foodService","authService","ngOnInit","searchOrder","subscribe","orders","foodObservables","map","order","findFood","id","foodId","foods","err","handleError","console","log","status","statusText","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/orders/orders.component.ts","/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/orders/orders.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { OrderRm, FoodRm, OrderDto } from '../api/models';\nimport { FoodService } from '../api/services';\nimport { OrderService } from './../api/services/order.service';\nimport { AuthService } from './../auth/auth.service';\nimport { forkJoin } from 'rxjs';\n\n\n@Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.css']\n})\nexport class OrdersComponent implements OnInit {\n\n  orders: OrderRm[] = [];\n  foods: FoodRm[] = [];\n\n  constructor(private orderService: OrderService,\n    private foodService: FoodService,\n    private authService: AuthService) { }\n\n  ngOnInit(): void {\n\n    this.orderService.searchOrder({ })\n      .subscribe(\n        (orders) => {\n          this.orders = orders;\n\n          // Fetch food data for each order\n          const foodObservables = orders.map((order) =>\n            this.foodService.findFood({ id: order.foodId! })\n          );\n\n          forkJoin(foodObservables).subscribe(\n            (foods) => {\n              // All food requests have completed here\n              this.foods = foods;\n            },\n            (err) => this.handleError(err)\n          );\n        },\n        (err) => this.handleError(err)\n      );\n  }\n\n  //search() {\n  //  this.orderService.searchOrder({})\n  //    .subscribe(rmList => this.orders = rmList,\n  //      this.handleError)\n  //}\n\n\n\n  private handleError(err: any) {\n    console.log(\"Response Error, Status:\", err.status);\n    console.log(\"Response Error, Status Text:\", err.statusText);\n    console.log(err);\n  }\n\n\n}\n","<div class=\"container\">\n\n    <!--<div *ngFor=\"let order of orders; let i = index\"\n         class=\"card mb-3\" style=\"max-width: 100%;\">\n        <div class=\"row g-0\">-->\n            <!--<div class=\"col-md-4\">\n                <img [src]=\"foods[i]?.imageUrl\" class=\"img-fluid rounded-start\" [alt]=\"foods[i]?.name\">\n            </div>\n            <div class=\"col-md-8\">-->\n                <!--<div class=\"card-body\">\n                    <p class=\"card-text\">Order owner: {{ order.orderOwner }}</p>\n                    <p class=\"card-text\">Name: {{ foods[i].name }}</p>\n                    <p class=\"card-text\">Address: {{ order.address }}</p>\n                    <p class=\"card-text\">Amount: {{ order.amount }}</p>\n                    <p class=\"card-text\"><small class=\"text-muted\">{{ order.status }}</small></p>\n\n                    <select class=\"form-select\" style=\"width:40%\">\n                        <option selected> {{ order.status }} </option>\n                        <option (click)=\"prepare()\">Preparing</option>\n                        <option (click)=\"onTheWay($event, order.orderId!)\">On the Way</option>\n                        <option (click)=\"deliver($event, order.orderId!)\">Delivered</option>\n                    </select>\n\n                </div>-->\n                \n            <!--</div>-->\n        <!--</div>\n    </div>-->\n\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}