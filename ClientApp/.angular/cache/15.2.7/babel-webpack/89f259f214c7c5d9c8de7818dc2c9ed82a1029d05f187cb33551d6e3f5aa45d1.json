{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/services\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../auth/auth.service\";\nimport * as i4 from \"@angular/router\";\nexport class RegisterComponent {\n  constructor(userService, fb, authService, router, activatedRoute) {\n    this.userService = userService;\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.requestedUrl = undefined;\n    this.form = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(100)])],\n      password: ['', Validators.compose([Validators.required, Validators.minLength(2), Validators.maxLength(35)])],\n      address: ['', Validators.compose([Validators.required, Validators.minLength(10), Validators.maxLength(200)])]\n    });\n    this.login = () => {\n      this.authService.loginUser({\n        email: this.form.get('email')?.value\n      });\n      this.router.navigate([this.requestedUrl ?? '/menu']);\n    };\n  }\n  ngOnInit() {\n    this.activatedRoute.params.subscribe(p => this.requestedUrl = p['requestedUrl']);\n  }\n  register() {\n    if (this.form.invalid) return;\n    console.log(\"Form Values:\", this.form.value);\n    this.userService.registerUser({\n      email: this.form.value.email,\n      password: this.form.value.password,\n      address: this.form.value.address\n    }).subscribe(this.login, console.error);\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 26,\n  vars: 1,\n  consts: [[1, \"container\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"name\", \"email\", \"id\", \"email\", \"placeholder\", \"Enter email\", \"formControlName\", \"email\", \"required\", \"\", \"email\", \"\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"name\", \"password\", \"formControlName\", \"password\", \"id\", \"password\", \"placeholder\", \"Password\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"address\"], [\"name\", \"address\", \"id\", \"address\", \"formControlName\", \"address\", \"placeholder\", \"Enter your address\", \"required\", \"\", 1, \"form-control\"], [1, \"form-check\"], [\"type\", \"checkbox\", \"name\", \"checkbox\", \"id\", \"checkbox\", \"required\", \"\", 1, \"form-check-input\"], [\"for\", \"gridCheck\", 1, \"form-check-label\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"form-text\", \"text-muted\", 2, \"color\", \"hsl(0, 78%, 75%)!important\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"header\")(1, \"div\", 0)(2, \"form\", 1)(3, \"div\", 2)(4, \"label\", 3);\n      i0.ɵɵtext(5, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 2)(8, \"label\", 5);\n      i0.ɵɵtext(9, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 2)(12, \"label\", 7);\n      i0.ɵɵtext(13, \"Address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"textarea\", 8);\n      i0.ɵɵtext(15, \"        \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 9);\n      i0.ɵɵelement(17, \"input\", 10);\n      i0.ɵɵelementStart(18, \"label\", 11);\n      i0.ɵɵtext(19, \" Check me out \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(20, \"br\");\n      i0.ɵɵelementStart(21, \"button\", 12);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_21_listener() {\n        return ctx.register();\n      });\n      i0.ɵɵtext(22, \" Sign up \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"br\");\n      i0.ɵɵelementStart(24, \"small\", 13);\n      i0.ɵɵtext(25, \" This email adress already exists. \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.EmailValidator, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"header[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  padding-left: 25%;\\n  margin-top: 2rem;\\n}\\n\\n#email[_ngcontent-%COMP%] {\\n  width: 60%;\\n}\\n\\n#password[_ngcontent-%COMP%] {\\n  width: 60%;\\n}\\n\\n#address[_ngcontent-%COMP%] {\\n  width: 60%;\\n  height: 6rem;\\n}\\n\\n.container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  padding: 0.4rem 2rem;\\n  background-color: #86bdf6;\\n  color: white;\\n}\\n\\n  .container[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover {\\n    color: #86bdf6;\\n    background-color: white;\\n    border: 1px solid #86bdf6;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsWUFBWTtBQUNkOztBQUVBO0VBQ0Usb0JBQW9CO0VBQ3BCLHlCQUF5QjtFQUN6QixZQUFZO0FBQ2Q7O0VBRUU7SUFDRSxjQUFjO0lBQ2QsdUJBQXVCO0lBQ3ZCLHlCQUF5QjtFQUMzQiIsInNvdXJjZXNDb250ZW50IjpbImhlYWRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nLWxlZnQ6IDI1JTtcbiAgbWFyZ2luLXRvcDogMnJlbTtcbn1cblxuI2VtYWlsIHtcbiAgd2lkdGg6IDYwJTtcbn1cblxuI3Bhc3N3b3JkIHtcbiAgd2lkdGg6IDYwJTtcbn1cblxuI2FkZHJlc3Mge1xuICB3aWR0aDogNjAlO1xuICBoZWlnaHQ6IDZyZW07XG59XG5cbi5jb250YWluZXIgZm9ybSBidXR0b24ge1xuICBwYWRkaW5nOiAwLjRyZW0gMnJlbTtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzg2YmRmNjtcbiAgY29sb3I6IHdoaXRlO1xufVxuXG4gIC5jb250YWluZXIgZm9ybSBidXR0b246aG92ZXIge1xuICAgIGNvbG9yOiAjODZiZGY2O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM4NmJkZjY7XG4gIH1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,UAAU,QAAQ,gBAAgB;;;;;;AAUxD,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,WAAwB,EAClCC,EAAe,EACfC,WAAwB,EACxBC,MAAc,EACdC,cAA8B;IAJpB,gBAAW,GAAXJ,WAAW;IACrB,OAAE,GAAFC,EAAE;IACF,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IAExB,iBAAY,GAAYC,SAAS;IAEjC,SAAI,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MACnBC,KAAK,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,OAAO,CAAC,CAACX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,EAAEb,UAAU,CAACc,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC1GC,QAAQ,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACW,OAAO,CAAC,CAACX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,EAAEb,UAAU,CAACc,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC5GE,OAAO,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACW,OAAO,CAAC,CAACX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,SAAS,CAAC,EAAE,CAAC,EAAEb,UAAU,CAACc,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;KAC7G,CAAC;IAsBM,UAAK,GAAG,MAAK;MACnB,IAAI,CAACT,WAAW,CAACY,SAAS,CAAC;QAAEP,KAAK,EAAE,IAAI,CAACQ,IAAI,CAACC,GAAG,CAAC,OAAO,CAAC,EAAEC;MAAM,CAAE,CAAC;MACrE,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,IAAI,CAACC,YAAY,IAAI,OAAO,CAAC,CAAC;IACtD,CAAC;EAjC2C;EAU5CC,QAAQ;IACN,IAAI,CAAChB,cAAc,CAACiB,MAAM,CAACC,SAAS,CAACC,CAAC,IAAI,IAAI,CAACJ,YAAY,GAAGI,CAAC,CAAC,cAAc,CAAC,CAAC;EAClF;EAEAC,QAAQ;IAEN,IAAI,IAAI,CAACT,IAAI,CAACU,OAAO,EACnB;IAEFC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACZ,IAAI,CAACE,KAAK,CAAC;IAE5C,IAAI,CAACjB,WAAW,CAAC4B,YAAY,CAAC;MAC5BrB,KAAK,EAAE,IAAI,CAACQ,IAAI,CAACE,KAAK,CAACV,KAAK;MAC5BK,QAAQ,EAAE,IAAI,CAACG,IAAI,CAACE,KAAK,CAACL,QAAQ;MAClCC,OAAO,EAAE,IAAI,CAACE,IAAI,CAACE,KAAK,CAACJ;KAC1B,CAAC,CACCS,SAAS,CAAC,IAAI,CAACO,KAAK,EAAEH,OAAO,CAACI,KAAK,CAAC;EAEzC;;AAlCWhC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAiC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT9BC,8BAAQ;MAM2BA,qBAAK;MAAAA,iBAAQ;MAChCA,2BAOa;MACjBA,iBAAM;MAENA,8BAAyB;MACCA,wBAAQ;MAAAA,iBAAQ;MACtCA,4BAMgB;MACpBA,iBAAM;MAENA,+BAAwB;MACCA,wBAAO;MAAAA,iBAAQ;MACpCA,oCAKmB;MAC3BA;MAAAA,iBAAW;MAIPA,+BAAwB;MACpBA,6BAIgB;MAChBA,kCAAgD;MAC5CA,+BACJ;MAAAA,iBAAQ;MAIZA,sBAAI;MACJA,mCAE6B;MAArBA;QAAA,OAASC,cAAU;MAAA,EAAC;MACxBD,0BACJ;MAAAA,iBAAS;MAETA,sBAAI;MACJA,kCAC+E;MAC3EA,oDACJ;MAAAA,iBAAQ;;;MA5DNA,eAAkB;MAAlBA,oCAAkB","names":["Validators","RegisterComponent","constructor","userService","fb","authService","router","activatedRoute","undefined","group","email","compose","required","minLength","maxLength","password","address","loginUser","form","get","value","navigate","requestedUrl","ngOnInit","params","subscribe","p","register","invalid","console","log","registerUser","login","error","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/register/register.component.ts","/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/register/register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { UserService } from '../api/services';\nimport { AuthService } from '../auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n\n  constructor(private userService: UserService,\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute) { }\n\n  requestedUrl?: string = undefined\n\n  form = this.fb.group({\n    email: ['', Validators.compose([Validators.required, Validators.minLength(3), Validators.maxLength(100)])],\n    password: ['', Validators.compose([Validators.required, Validators.minLength(2), Validators.maxLength(35)])],\n    address: ['', Validators.compose([Validators.required, Validators.minLength(10), Validators.maxLength(200)])],\n  })\n\n  ngOnInit(): void {\n    this.activatedRoute.params.subscribe(p => this.requestedUrl = p['requestedUrl'])\n  }\n\n  register() {\n\n    if (this.form.invalid)\n      return;\n\n    console.log(\"Form Values:\", this.form.value);\n\n    this.userService.registerUser({\n      email: this.form.value.email,\n      password: this.form.value.password,\n      address: this.form.value.address,\n    })\n      .subscribe(this.login, console.error)\n\n  }\n\n  private login = () => {\n    this.authService.loginUser({ email: this.form.get('email')?.value! })\n    this.router.navigate([this.requestedUrl ?? '/menu'])\n  }\n\n}\n","<!-- <p>register works!</p> -->\n\n<header>\n    <div class=\"container\">\n\n        <form [formGroup]=\"form\">\n\n            <div class=\"form-group \">\n                <label for=\"email\">Email</label>\n                <input type=\"email\"\n                       name=\"email\"\n                       class=\"form-control\"\n                       id=\"email\"\n                       placeholder=\"Enter email\"\n                       formControlName=\"email\"\n                       required\n                       email>\n            </div>\n\n            <div class=\"form-group \">\n                <label for=\"password\">Password</label>\n                <input type=\"password\"\n                       name=\"password\"\n                       formControlName=\"password\"\n                       class=\"form-control\"\n                       id=\"password\"\n                       placeholder=\"Password\"\n                       required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"address\">Address</label>\n                <textarea name=\"address\"\n                          class=\"form-control\"\n                          id=\"address\"\n                          formControlName=\"address\"\n                          placeholder=\"Enter your address\"\n                          required>\n        </textarea>\n            </div>\n\n\n            <div class=\"form-check\">\n                <input type=\"checkbox\"\n                       name=\"checkbox\"\n                       class=\"form-check-input\"\n                       id=\"checkbox\"\n                       required>\n                <label class=\"form-check-label\" for=\"gridCheck\">\n                    Check me out\n                </label>\n            </div>\n\n\n            <br>\n            <button type=\"submit\"\n                    class=\"btn btn-primary\"\n                    (click)=\"register()\">\n                Sign up\n            </button>\n\n            <br>\n            <small\n                   class=\"form-text text-muted\" style=\" color: hsl(0, 78%, 75%)!important\">\n                This email adress already exists.\n            </small>\n\n\n        </form>\n\n    </div>\n</header>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}