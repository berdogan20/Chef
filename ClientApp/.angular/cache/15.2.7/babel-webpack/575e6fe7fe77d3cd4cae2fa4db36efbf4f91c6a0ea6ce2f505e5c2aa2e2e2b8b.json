{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { deleteBasket } from '../fn/basket/delete-basket';\nimport { getBasket } from '../fn/basket/get-basket';\nimport { getBasket_1 } from '../fn/basket/get-basket-1';\nimport { getBasket_1$Plain } from '../fn/basket/get-basket-1-plain';\nimport { getBasket$Plain } from '../fn/basket/get-basket-plain';\nimport { postBasket } from '../fn/basket/post-basket';\nimport { putBasket } from '../fn/basket/put-basket';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class BasketService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `getBasket()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasket$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket$Plain$Response(params, context) {\n    return getBasket$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasket$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket$Plain(params, context) {\n    return this.getBasket$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasket()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket$Response(params, context) {\n    return getBasket(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasket$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket(params, context) {\n    return this.getBasket$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `postBasket()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `postBasket()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  postBasket$Response(params, context) {\n    return postBasket(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `postBasket$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  postBasket(params, context) {\n    return this.postBasket$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getBasket_1()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasket_1$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket_1$Plain$Response(params, context) {\n    return getBasket_1$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasket_1$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket_1$Plain(params, context) {\n    return this.getBasket_1$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasket_1()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket_1$Response(params, context) {\n    return getBasket_1(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasket_1$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket_1(params, context) {\n    return this.getBasket_1$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `putBasket()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `putBasket()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  putBasket$Response(params, context) {\n    return putBasket(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `putBasket$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  putBasket(params, context) {\n    return this.putBasket$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `deleteBasket()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteBasket()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteBasket$Response(params, context) {\n    return deleteBasket(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `deleteBasket$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteBasket(params, context) {\n    return this.deleteBasket$Response(params, context).pipe(map(r => r.body));\n  }\n}\nBasketService.GetBasketPath = '/api/Basket';\nBasketService.PostBasketPath = '/api/Basket';\nBasketService.GetBasket_1Path = '/api/Basket/{id}';\nBasketService.PutBasketPath = '/api/Basket/{id}';\nBasketService.DeleteBasketPath = '/api/Basket/{id}';\nBasketService.ɵfac = function BasketService_Factory(t) {\n  return new (t || BasketService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nBasketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BasketService,\n  factory: BasketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","BaseService","deleteBasket","getBasket","getBasket_1","getBasket_1$Plain","getBasket$Plain","postBasket","putBasket","BasketService","constructor","config","http","getBasket$Plain$Response","params","context","rootUrl","pipe","r","body","getBasket$Response","postBasket$Response","getBasket_1$Plain$Response","getBasket_1$Response","putBasket$Response","deleteBasket$Response","GetBasketPath","PostBasketPath","GetBasket_1Path","PutBasketPath","DeleteBasketPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/services/basket.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { deleteBasket } from '../fn/basket/delete-basket';\nimport { DeleteBasket$Params } from '../fn/basket/delete-basket';\nimport { getBasket } from '../fn/basket/get-basket';\nimport { getBasket_1 } from '../fn/basket/get-basket-1';\nimport { GetBasket_1$Params } from '../fn/basket/get-basket-1';\nimport { getBasket_1$Plain } from '../fn/basket/get-basket-1-plain';\nimport { GetBasket_1$Plain$Params } from '../fn/basket/get-basket-1-plain';\nimport { GetBasket$Params } from '../fn/basket/get-basket';\nimport { getBasket$Plain } from '../fn/basket/get-basket-plain';\nimport { GetBasket$Plain$Params } from '../fn/basket/get-basket-plain';\nimport { postBasket } from '../fn/basket/post-basket';\nimport { PostBasket$Params } from '../fn/basket/post-basket';\nimport { putBasket } from '../fn/basket/put-basket';\nimport { PutBasket$Params } from '../fn/basket/put-basket';\n\n@Injectable({ providedIn: 'root' })\nexport class BasketService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `getBasket()` */\n  static readonly GetBasketPath = '/api/Basket';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasket$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket$Plain$Response(params?: GetBasket$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {\n    return getBasket$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasket$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket$Plain(params?: GetBasket$Plain$Params, context?: HttpContext): Observable<Array<string>> {\n    return this.getBasket$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasket()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket$Response(params?: GetBasket$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {\n    return getBasket(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasket$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket(params?: GetBasket$Params, context?: HttpContext): Observable<Array<string>> {\n    return this.getBasket$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)\n    );\n  }\n\n  /** Path part for operation `postBasket()` */\n  static readonly PostBasketPath = '/api/Basket';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `postBasket()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  postBasket$Response(params?: PostBasket$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return postBasket(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `postBasket$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  postBasket(params?: PostBasket$Params, context?: HttpContext): Observable<void> {\n    return this.postBasket$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `getBasket_1()` */\n  static readonly GetBasket_1Path = '/api/Basket/{id}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasket_1$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket_1$Plain$Response(params: GetBasket_1$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\n    return getBasket_1$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasket_1$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket_1$Plain(params: GetBasket_1$Plain$Params, context?: HttpContext): Observable<string> {\n    return this.getBasket_1$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<string>): string => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasket_1()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket_1$Response(params: GetBasket_1$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\n    return getBasket_1(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasket_1$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasket_1(params: GetBasket_1$Params, context?: HttpContext): Observable<string> {\n    return this.getBasket_1$Response(params, context).pipe(\n      map((r: StrictHttpResponse<string>): string => r.body)\n    );\n  }\n\n  /** Path part for operation `putBasket()` */\n  static readonly PutBasketPath = '/api/Basket/{id}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `putBasket()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  putBasket$Response(params: PutBasket$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return putBasket(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `putBasket$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  putBasket(params: PutBasket$Params, context?: HttpContext): Observable<void> {\n    return this.putBasket$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `deleteBasket()` */\n  static readonly DeleteBasketPath = '/api/Basket/{id}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteBasket()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteBasket$Response(params: DeleteBasket$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return deleteBasket(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `deleteBasket$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteBasket(params: DeleteBasket$Params, context?: HttpContext): Observable<void> {\n    return this.deleteBasket$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}