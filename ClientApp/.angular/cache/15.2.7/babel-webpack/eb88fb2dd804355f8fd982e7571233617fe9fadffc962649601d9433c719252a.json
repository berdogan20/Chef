{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { buyOrder } from '../fn/order/buy-order';\nimport { findByIdOrder } from '../fn/order/find-by-id-order';\nimport { findByIdOrder$Plain } from '../fn/order/find-by-id-order-plain';\nimport { findOrder } from '../fn/order/find-order';\nimport { findOrder$Plain } from '../fn/order/find-order-plain';\nimport { getOrderItemsOrder } from '../fn/order/get-order-items-order';\nimport { getOrderItemsOrder$Plain } from '../fn/order/get-order-items-order-plain';\nimport { listOrder } from '../fn/order/list-order';\nimport { listOrder$Plain } from '../fn/order/list-order-plain';\nimport { searchOrder } from '../fn/order/search-order';\nimport { searchOrder$Plain } from '../fn/order/search-order-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class OrderService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchOrder()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchOrder$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchOrder$Plain$Response(params, context) {\n    return searchOrder$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchOrder$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchOrder$Plain(params, context) {\n    return this.searchOrder$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchOrder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchOrder$Response(params, context) {\n    return searchOrder(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchOrder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchOrder(params, context) {\n    return this.searchOrder$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `buyOrder()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `buyOrder()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  buyOrder$Response(params, context) {\n    return buyOrder(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `buyOrder$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  buyOrder(params, context) {\n    return this.buyOrder$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `listOrder()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listOrder$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listOrder$Plain$Response(params, context) {\n    return listOrder$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listOrder$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listOrder$Plain(params, context) {\n    return this.listOrder$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listOrder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listOrder$Response(params, context) {\n    return listOrder(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listOrder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listOrder(params, context) {\n    return this.listOrder$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findOrder()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findOrder$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findOrder$Plain$Response(params, context) {\n    return findOrder$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findOrder$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findOrder$Plain(params, context) {\n    return this.findOrder$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findOrder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findOrder$Response(params, context) {\n    return findOrder(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findOrder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findOrder(params, context) {\n    return this.findOrder$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findByIdOrder()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findByIdOrder$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findByIdOrder$Plain$Response(params, context) {\n    return findByIdOrder$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findByIdOrder$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findByIdOrder$Plain(params, context) {\n    return this.findByIdOrder$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findByIdOrder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findByIdOrder$Response(params, context) {\n    return findByIdOrder(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findByIdOrder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findByIdOrder(params, context) {\n    return this.findByIdOrder$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getOrderItemsOrder()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getOrderItemsOrder$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOrderItemsOrder$Plain$Response(params, context) {\n    return getOrderItemsOrder$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getOrderItemsOrder$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOrderItemsOrder$Plain(params, context) {\n    return this.getOrderItemsOrder$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getOrderItemsOrder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOrderItemsOrder$Response(params, context) {\n    return getOrderItemsOrder(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getOrderItemsOrder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOrderItemsOrder(params, context) {\n    return this.getOrderItemsOrder$Response(params, context).pipe(map(r => r.body));\n  }\n}\nOrderService.SearchOrderPath = '/Order';\nOrderService.BuyOrderPath = '/Order';\nOrderService.ListOrderPath = '/Order/list/{email}';\nOrderService.FindOrderPath = '/Order/{email}';\nOrderService.FindByIdOrderPath = '/Order/{id}';\nOrderService.GetOrderItemsOrderPath = '/Order/{orderId}/items';\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,QAAQ,QAAQ,uBAAuB;AAEhD,SAASC,aAAa,QAAQ,8BAA8B;AAE5D,SAASC,mBAAmB,QAAQ,oCAAoC;AAExE,SAASC,SAAS,QAAQ,wBAAwB;AAElD,SAASC,eAAe,QAAQ,8BAA8B;AAE9D,SAASC,kBAAkB,QAAQ,mCAAmC;AAEtE,SAASC,wBAAwB,QAAQ,yCAAyC;AAElF,SAASC,SAAS,QAAQ,wBAAwB;AAElD,SAASC,eAAe,QAAQ,8BAA8B;AAI9D,SAASC,WAAW,QAAQ,0BAA0B;AAEtD,SAASC,iBAAiB,QAAQ,gCAAgC;;;;AAIlE,OAAM,MAAOC,YAAa,SAAQZ,WAAW;EAC3Ca,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,0BAA0B,CAACC,MAAiC,EAAEC,OAAqB;IACjF,OAAOP,iBAAiB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACpE;EAEA;;;;;;EAMAP,iBAAiB,CAACM,MAAiC,EAAEC,OAAqB;IACxE,OAAO,IAAI,CAACF,0BAA0B,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC1DrB,GAAG,CAAEsB,CAAqC,IAAqBA,CAAC,CAACC,IAAI,CAAC,CACvE;EACH;EAEA;;;;;;EAMAC,oBAAoB,CAACN,MAA2B,EAAEC,OAAqB;IACrE,OAAOR,WAAW,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC9D;EAEA;;;;;;EAMAR,WAAW,CAACO,MAA2B,EAAEC,OAAqB;IAC5D,OAAO,IAAI,CAACK,oBAAoB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACpDrB,GAAG,CAAEsB,CAAqC,IAAqBA,CAAC,CAACC,IAAI,CAAC,CACvE;EACH;EAEA;;EAGA;;;;;;EAMAE,iBAAiB,CAACP,MAAwB,EAAEC,OAAqB;IAC/D,OAAOjB,QAAQ,CAAC,IAAI,CAACc,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC3D;EAEA;;;;;;EAMAjB,QAAQ,CAACgB,MAAwB,EAAEC,OAAqB;IACtD,OAAO,IAAI,CAACM,iBAAiB,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACjDrB,GAAG,CAAEsB,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAG,wBAAwB,CAACR,MAA8B,EAAEC,OAAqB;IAC5E,OAAOT,eAAe,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAClE;EAEA;;;;;;EAMAT,eAAe,CAACQ,MAA8B,EAAEC,OAAqB;IACnE,OAAO,IAAI,CAACO,wBAAwB,CAACR,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACxDrB,GAAG,CAAEsB,CAAqC,IAAqBA,CAAC,CAACC,IAAI,CAAC,CACvE;EACH;EAEA;;;;;;EAMAI,kBAAkB,CAACT,MAAwB,EAAEC,OAAqB;IAChE,OAAOV,SAAS,CAAC,IAAI,CAACO,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC5D;EAEA;;;;;;EAMAV,SAAS,CAACS,MAAwB,EAAEC,OAAqB;IACvD,OAAO,IAAI,CAACQ,kBAAkB,CAACT,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAClDrB,GAAG,CAAEsB,CAAqC,IAAqBA,CAAC,CAACC,IAAI,CAAC,CACvE;EACH;EAEA;;EAGA;;;;;;EAMAK,wBAAwB,CAACV,MAA8B,EAAEC,OAAqB;IAC5E,OAAOb,eAAe,CAAC,IAAI,CAACU,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAClE;EAEA;;;;;;EAMAb,eAAe,CAACY,MAA8B,EAAEC,OAAqB;IACnE,OAAO,IAAI,CAACS,wBAAwB,CAACV,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACxDrB,GAAG,CAAEsB,CAA8B,IAAcA,CAAC,CAACC,IAAI,CAAC,CACzD;EACH;EAEA;;;;;;EAMAM,kBAAkB,CAACX,MAAwB,EAAEC,OAAqB;IAChE,OAAOd,SAAS,CAAC,IAAI,CAACW,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC5D;EAEA;;;;;;EAMAd,SAAS,CAACa,MAAwB,EAAEC,OAAqB;IACvD,OAAO,IAAI,CAACU,kBAAkB,CAACX,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAClDrB,GAAG,CAAEsB,CAA8B,IAAcA,CAAC,CAACC,IAAI,CAAC,CACzD;EACH;EAEA;;EAGA;;;;;;EAMAO,4BAA4B,CAACZ,MAAkC,EAAEC,OAAqB;IACpF,OAAOf,mBAAmB,CAAC,IAAI,CAACY,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACtE;EAEA;;;;;;EAMAf,mBAAmB,CAACc,MAAkC,EAAEC,OAAqB;IAC3E,OAAO,IAAI,CAACW,4BAA4B,CAACZ,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC5DrB,GAAG,CAAEsB,CAA8B,IAAcA,CAAC,CAACC,IAAI,CAAC,CACzD;EACH;EAEA;;;;;;EAMAQ,sBAAsB,CAACb,MAA4B,EAAEC,OAAqB;IACxE,OAAOhB,aAAa,CAAC,IAAI,CAACa,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAChE;EAEA;;;;;;EAMAhB,aAAa,CAACe,MAA4B,EAAEC,OAAqB;IAC/D,OAAO,IAAI,CAACY,sBAAsB,CAACb,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACtDrB,GAAG,CAAEsB,CAA8B,IAAcA,CAAC,CAACC,IAAI,CAAC,CACzD;EACH;EAEA;;EAGA;;;;;;EAMAS,iCAAiC,CAACd,MAAuC,EAAEC,OAAqB;IAC9F,OAAOX,wBAAwB,CAAC,IAAI,CAACQ,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC3E;EAEA;;;;;;EAMAX,wBAAwB,CAACU,MAAuC,EAAEC,OAAqB;IACrF,OAAO,IAAI,CAACa,iCAAiC,CAACd,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACjErB,GAAG,CAAEsB,CAAuC,IAAuBA,CAAC,CAACC,IAAI,CAAC,CAC3E;EACH;EAEA;;;;;;EAMAU,2BAA2B,CAACf,MAAiC,EAAEC,OAAqB;IAClF,OAAOZ,kBAAkB,CAAC,IAAI,CAACS,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACrE;EAEA;;;;;;EAMAZ,kBAAkB,CAACW,MAAiC,EAAEC,OAAqB;IACzE,OAAO,IAAI,CAACc,2BAA2B,CAACf,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC3DrB,GAAG,CAAEsB,CAAuC,IAAuBA,CAAC,CAACC,IAAI,CAAC,CAC3E;EACH;;AAvQWV,YAAa,CAMRqB,eAAe,GAAG,QAAQ;AAN/BrB,YAAa,CAqDRsB,YAAY,GAAG,QAAQ;AArD5BtB,YAAa,CA8ERuB,aAAa,GAAG,qBAAqB;AA9E1CvB,YAAa,CA6HRwB,aAAa,GAAG,gBAAgB;AA7HrCxB,YAAa,CA4KRyB,iBAAiB,GAAG,aAAa;AA5KtCzB,YAAa,CA2NR0B,sBAAsB,GAAG,wBAAwB;AA3NtD1B,YAAa;mBAAbA,YAAY;AAAA;AAAZA,YAAa;SAAbA,YAAY;EAAA2B,SAAZ3B,YAAY;EAAA4B,YADC;AAAM","names":["map","BaseService","buyOrder","findByIdOrder","findByIdOrder$Plain","findOrder","findOrder$Plain","getOrderItemsOrder","getOrderItemsOrder$Plain","listOrder","listOrder$Plain","searchOrder","searchOrder$Plain","OrderService","constructor","config","http","searchOrder$Plain$Response","params","context","rootUrl","pipe","r","body","searchOrder$Response","buyOrder$Response","listOrder$Plain$Response","listOrder$Response","findOrder$Plain$Response","findOrder$Response","findByIdOrder$Plain$Response","findByIdOrder$Response","getOrderItemsOrder$Plain$Response","getOrderItemsOrder$Response","SearchOrderPath","BuyOrderPath","ListOrderPath","FindOrderPath","FindByIdOrderPath","GetOrderItemsOrderPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/services/order.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { buyOrder } from '../fn/order/buy-order';\nimport { BuyOrder$Params } from '../fn/order/buy-order';\nimport { findByIdOrder } from '../fn/order/find-by-id-order';\nimport { FindByIdOrder$Params } from '../fn/order/find-by-id-order';\nimport { findByIdOrder$Plain } from '../fn/order/find-by-id-order-plain';\nimport { FindByIdOrder$Plain$Params } from '../fn/order/find-by-id-order-plain';\nimport { findOrder } from '../fn/order/find-order';\nimport { FindOrder$Params } from '../fn/order/find-order';\nimport { findOrder$Plain } from '../fn/order/find-order-plain';\nimport { FindOrder$Plain$Params } from '../fn/order/find-order-plain';\nimport { getOrderItemsOrder } from '../fn/order/get-order-items-order';\nimport { GetOrderItemsOrder$Params } from '../fn/order/get-order-items-order';\nimport { getOrderItemsOrder$Plain } from '../fn/order/get-order-items-order-plain';\nimport { GetOrderItemsOrder$Plain$Params } from '../fn/order/get-order-items-order-plain';\nimport { listOrder } from '../fn/order/list-order';\nimport { ListOrder$Params } from '../fn/order/list-order';\nimport { listOrder$Plain } from '../fn/order/list-order-plain';\nimport { ListOrder$Plain$Params } from '../fn/order/list-order-plain';\nimport { OrderItem } from '../models/order-item';\nimport { OrderRm } from '../models/order-rm';\nimport { searchOrder } from '../fn/order/search-order';\nimport { SearchOrder$Params } from '../fn/order/search-order';\nimport { searchOrder$Plain } from '../fn/order/search-order-plain';\nimport { SearchOrder$Plain$Params } from '../fn/order/search-order-plain';\n\n@Injectable({ providedIn: 'root' })\nexport class OrderService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `searchOrder()` */\n  static readonly SearchOrderPath = '/Order';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchOrder$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchOrder$Plain$Response(params?: SearchOrder$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderRm>>> {\n    return searchOrder$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchOrder$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchOrder$Plain(params?: SearchOrder$Plain$Params, context?: HttpContext): Observable<Array<OrderRm>> {\n    return this.searchOrder$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<OrderRm>>): Array<OrderRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `searchOrder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchOrder$Response(params?: SearchOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderRm>>> {\n    return searchOrder(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `searchOrder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  searchOrder(params?: SearchOrder$Params, context?: HttpContext): Observable<Array<OrderRm>> {\n    return this.searchOrder$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<OrderRm>>): Array<OrderRm> => r.body)\n    );\n  }\n\n  /** Path part for operation `buyOrder()` */\n  static readonly BuyOrderPath = '/Order';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `buyOrder()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  buyOrder$Response(params?: BuyOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return buyOrder(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `buyOrder$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  buyOrder(params?: BuyOrder$Params, context?: HttpContext): Observable<void> {\n    return this.buyOrder$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `listOrder()` */\n  static readonly ListOrderPath = '/Order/list/{email}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listOrder$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listOrder$Plain$Response(params: ListOrder$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderRm>>> {\n    return listOrder$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listOrder$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listOrder$Plain(params: ListOrder$Plain$Params, context?: HttpContext): Observable<Array<OrderRm>> {\n    return this.listOrder$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<OrderRm>>): Array<OrderRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listOrder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listOrder$Response(params: ListOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderRm>>> {\n    return listOrder(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `listOrder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listOrder(params: ListOrder$Params, context?: HttpContext): Observable<Array<OrderRm>> {\n    return this.listOrder$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<OrderRm>>): Array<OrderRm> => r.body)\n    );\n  }\n\n  /** Path part for operation `findOrder()` */\n  static readonly FindOrderPath = '/Order/{email}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findOrder$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findOrder$Plain$Response(params: FindOrder$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderRm>> {\n    return findOrder$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findOrder$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findOrder$Plain(params: FindOrder$Plain$Params, context?: HttpContext): Observable<OrderRm> {\n    return this.findOrder$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<OrderRm>): OrderRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findOrder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findOrder$Response(params: FindOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderRm>> {\n    return findOrder(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findOrder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findOrder(params: FindOrder$Params, context?: HttpContext): Observable<OrderRm> {\n    return this.findOrder$Response(params, context).pipe(\n      map((r: StrictHttpResponse<OrderRm>): OrderRm => r.body)\n    );\n  }\n\n  /** Path part for operation `findByIdOrder()` */\n  static readonly FindByIdOrderPath = '/Order/{id}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findByIdOrder$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findByIdOrder$Plain$Response(params: FindByIdOrder$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderRm>> {\n    return findByIdOrder$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findByIdOrder$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findByIdOrder$Plain(params: FindByIdOrder$Plain$Params, context?: HttpContext): Observable<OrderRm> {\n    return this.findByIdOrder$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<OrderRm>): OrderRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `findByIdOrder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findByIdOrder$Response(params: FindByIdOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderRm>> {\n    return findByIdOrder(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `findByIdOrder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  findByIdOrder(params: FindByIdOrder$Params, context?: HttpContext): Observable<OrderRm> {\n    return this.findByIdOrder$Response(params, context).pipe(\n      map((r: StrictHttpResponse<OrderRm>): OrderRm => r.body)\n    );\n  }\n\n  /** Path part for operation `getOrderItemsOrder()` */\n  static readonly GetOrderItemsOrderPath = '/Order/{orderId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getOrderItemsOrder$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOrderItemsOrder$Plain$Response(params: GetOrderItemsOrder$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderItem>>> {\n    return getOrderItemsOrder$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getOrderItemsOrder$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOrderItemsOrder$Plain(params: GetOrderItemsOrder$Plain$Params, context?: HttpContext): Observable<Array<OrderItem>> {\n    return this.getOrderItemsOrder$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<OrderItem>>): Array<OrderItem> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getOrderItemsOrder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOrderItemsOrder$Response(params: GetOrderItemsOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderItem>>> {\n    return getOrderItemsOrder(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getOrderItemsOrder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getOrderItemsOrder(params: GetOrderItemsOrder$Params, context?: HttpContext): Observable<Array<OrderItem>> {\n    return this.getOrderItemsOrder$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<OrderItem>>): Array<OrderItem> => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}