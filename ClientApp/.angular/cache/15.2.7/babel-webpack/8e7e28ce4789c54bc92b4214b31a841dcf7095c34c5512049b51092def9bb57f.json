{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { RequestBuilder } from '../../request-builder';\nexport function registerUser(http, rootUrl, params, context) {\n  const rb = new RequestBuilder(rootUrl, registerUser.PATH, 'post');\n  if (params) {\n    rb.query('Email', params.Email, {});\n    rb.query('FirstName', params.FirstName, {});\n    rb.query('LastName', params.LastName, {});\n    rb.query('Password', params.Password, {});\n    rb.query('Address', params.Address, {});\n  }\n  return http.request(rb.build({\n    responseType: 'text',\n    accept: '*/*',\n    context\n  })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n    return r.clone({\n      body: undefined\n    });\n  }));\n}\nregisterUser.PATH = '/User';","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAkCA,YAAY,QAAQ,sBAAsB;AAE5E,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;AAE5C,SAASC,cAAc,QAAQ,uBAAuB;AAWtD,OAAM,SAAUC,YAAY,CAACC,IAAgB,EAAEC,OAAe,EAAEC,MAA4B,EAAEC,OAAqB;EACjH,MAAMC,EAAE,GAAG,IAAIN,cAAc,CAACG,OAAO,EAAEF,YAAY,CAACM,IAAI,EAAE,MAAM,CAAC;EACjE,IAAIH,MAAM,EAAE;IACVE,EAAE,CAACE,KAAK,CAAC,OAAO,EAAEJ,MAAM,CAACK,KAAK,EAAE,EAAE,CAAC;IACnCH,EAAE,CAACE,KAAK,CAAC,WAAW,EAAEJ,MAAM,CAACM,SAAS,EAAE,EAAE,CAAC;IAC3CJ,EAAE,CAACE,KAAK,CAAC,UAAU,EAAEJ,MAAM,CAACO,QAAQ,EAAE,EAAE,CAAC;IACzCL,EAAE,CAACE,KAAK,CAAC,UAAU,EAAEJ,MAAM,CAACQ,QAAQ,EAAE,EAAE,CAAC;IACzCN,EAAE,CAACE,KAAK,CAAC,SAAS,EAAEJ,MAAM,CAACS,OAAO,EAAE,EAAE,CAAC;;EAGzC,OAAOX,IAAI,CAACY,OAAO,CACjBR,EAAE,CAACS,KAAK,CAAC;IAAEC,YAAY,EAAE,MAAM;IAAEC,MAAM,EAAE,KAAK;IAAEZ;EAAO,CAAE,CAAC,CAC3D,CAACa,IAAI,CACJpB,MAAM,CAAEqB,CAAM,IAA6BA,CAAC,YAAYtB,YAAY,CAAC,EACrEE,GAAG,CAAEoB,CAAoB,IAAI;IAC3B,OAAQA,CAAuB,CAACC,KAAK,CAAC;MAAEC,IAAI,EAAEC;IAAS,CAAE,CAA6B;EACxF,CAAC,CAAC,CACH;AACH;AAEArB,YAAY,CAACM,IAAI,GAAG,OAAO","names":["HttpResponse","filter","map","RequestBuilder","registerUser","http","rootUrl","params","context","rb","PATH","query","Email","FirstName","LastName","Password","Address","request","build","responseType","accept","pipe","r","clone","body","undefined"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/fn/user/register-user.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StrictHttpResponse } from '../../strict-http-response';\nimport { RequestBuilder } from '../../request-builder';\n\n\nexport interface RegisterUser$Params {\n  Email?: string;\n  FirstName?: string;\n  LastName?: string;\n  Password?: string;\n  Address?: string;\n}\n\nexport function registerUser(http: HttpClient, rootUrl: string, params?: RegisterUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n  const rb = new RequestBuilder(rootUrl, registerUser.PATH, 'post');\n  if (params) {\n    rb.query('Email', params.Email, {});\n    rb.query('FirstName', params.FirstName, {});\n    rb.query('LastName', params.LastName, {});\n    rb.query('Password', params.Password, {});\n    rb.query('Address', params.Address, {});\n  }\n\n  return http.request(\n    rb.build({ responseType: 'text', accept: '*/*', context })\n  ).pipe(\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n    map((r: HttpResponse<any>) => {\n      return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n    })\n  );\n}\n\nregisterUser.PATH = '/User';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}