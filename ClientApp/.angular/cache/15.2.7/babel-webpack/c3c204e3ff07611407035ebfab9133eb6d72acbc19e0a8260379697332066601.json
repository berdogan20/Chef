{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./../api/services/order.service\";\nimport * as i2 from \"../api/services\";\nimport * as i3 from \"./../auth/auth.service\";\nimport * as i4 from \"@angular/common\";\nfunction MyOrdersComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"div\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\nexport class MyOrdersComponent {\n  constructor(orderService, foodService, authService) {\n    this.orderService = orderService;\n    this.foodService = foodService;\n    this.authService = authService;\n    this.orders = [];\n    this.foods = [];\n  }\n  ngOnInit() {\n    //console.log(this.authService.currentUser?.email);\n    //this.orderService.listOrder({ email: this.authService.currentUser?.email ?? '' })\n    //  .subscribe(\n    //    (orders) => {\n    //      this.orders = orders;\n    //      // Fetch food data for each order\n    //      const foodObservables = orders.map((order) =>\n    //        this.foodService.findFood({ id: order.foodId! })\n    //      );\n    //      forkJoin(foodObservables).subscribe(\n    //        (foods) => {\n    //          // All food requests have completed here\n    //          this.foods = foods;\n    //        },\n    //        (err) => this.handleError(err)\n    //      );\n    //    },\n    //    (err) => this.handleError(err)\n    //  );\n  }\n  handleError(err) {\n    console.log(\"Response Error, Status:\", err.status);\n    console.log(\"Response Error, Status Text:\", err.statusText);\n    console.log(err);\n  }\n}\nMyOrdersComponent.ɵfac = function MyOrdersComponent_Factory(t) {\n  return new (t || MyOrdersComponent)(i0.ɵɵdirectiveInject(i1.OrderService), i0.ɵɵdirectiveInject(i2.FoodService), i0.ɵɵdirectiveInject(i3.AuthService));\n};\nMyOrdersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MyOrdersComponent,\n  selectors: [[\"app-my-orders\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"container\"], [\"class\", \"card mb-3\", \"style\", \"max-width: 100%;\", 4, \"ngFor\", \"ngForOf\"], [1, \"card\", \"mb-3\", 2, \"max-width\", \"100%\"], [1, \"row\", \"g-0\"]],\n  template: function MyOrdersComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, MyOrdersComponent_div_1_Template, 2, 0, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.orders);\n    }\n  },\n  dependencies: [i4.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;IAEIA,8BACgD;IAC5CA,yBAYM;IACVA,iBAAM;;;ACLV,OAAM,MAAOC,iBAAiB;EAK5BC,YAAoBC,YAA0B,EACpCC,WAAwB,EACxBC,WAAwB;IAFd,iBAAY,GAAZF,YAAY;IACtB,gBAAW,GAAXC,WAAW;IACX,gBAAW,GAAXC,WAAW;IALrB,WAAM,GAAc,EAAE;IACtB,UAAK,GAAa,EAAE;EAIkB;EAGtCC,QAAQ;IACN;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;EAKMC,WAAW,CAACC,GAAQ;IAC1BC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,GAAG,CAACG,MAAM,CAAC;IAClDF,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,GAAG,CAACI,UAAU,CAAC;IAC3DH,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAClB;;AAzCWP,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAY;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDZ9BjB,8BAAuB;MAEnBA,kEAeM;MAEVA,iBAAM;;;MAjBwBA,eAAW;MAAXA,oCAAW","names":["i0","MyOrdersComponent","constructor","orderService","foodService","authService","ngOnInit","handleError","err","console","log","status","statusText","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/my-orders/my-orders.component.html","/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/my-orders/my-orders.component.ts"],"sourcesContent":["<div class=\"container\">\n\n    <div    *ngFor=\"let order of orders; let i = index\"\n         class=\"card mb-3\" style=\"max-width: 100%;\">\n        <div class=\"row g-0\">\n            <!--<div class=\"col-md-4\">\n                <img [src]=\"foods[i]?.imageUrl\" class=\"img-fluid rounded-start\" [alt]=\"foods[i]?.name\">\n            </div>\n            <div class=\"col-md-8\">\n                <div class=\"card-body\">\n                    <h5 class=\"card-title\"> {{ foods[i]?.name }} </h5> \n                    <p class=\"card-text\">{{ foods[i]?.description }}</p>\n                    <p class=\"card-text\"> Amount: {{ order.amount }}</p>\n                    <p class=\"card-text\"><small class=\"text-muted\">{{ order.status }}</small></p>\n                </div>\n            </div>-->\n        </div>\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { OrderRm, FoodRm} from '../api/models';\nimport { FoodService } from '../api/services';\nimport { OrderService } from './../api/services/order.service';\nimport { AuthService } from './../auth/auth.service';\nimport { forkJoin } from 'rxjs';\n\n@Component({\n  selector: 'app-my-orders',\n  templateUrl: './my-orders.component.html',\n  styleUrls: ['./my-orders.component.css']\n})\nexport class MyOrdersComponent {\n\n  orders: OrderRm[] = [];\n  foods: FoodRm[] = [];\n\n  constructor(private orderService: OrderService,\n    private foodService: FoodService,\n    private authService: AuthService) { }\n\n\n  ngOnInit(): void {\n    //console.log(this.authService.currentUser?.email);\n\n    //this.orderService.listOrder({ email: this.authService.currentUser?.email ?? '' })\n    //  .subscribe(\n    //    (orders) => {\n    //      this.orders = orders;\n\n    //      // Fetch food data for each order\n    //      const foodObservables = orders.map((order) =>\n    //        this.foodService.findFood({ id: order.foodId! })\n    //      );\n\n    //      forkJoin(foodObservables).subscribe(\n    //        (foods) => {\n    //          // All food requests have completed here\n    //          this.foods = foods;\n    //        },\n    //        (err) => this.handleError(err)\n    //      );\n    //    },\n    //    (err) => this.handleError(err)\n    //  );\n  }\n\n\n\n  private handleError(err: any) {\n    console.log(\"Response Error, Status:\", err.status);\n    console.log(\"Response Error, Status Text:\", err.statusText);\n    console.log(err);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}