{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { addBasketItemBasketItem } from '../fn/basket-item/add-basket-item-basket-item';\nimport { getBasketItemsBasketItem } from '../fn/basket-item/get-basket-items-basket-item';\nimport { getBasketItemsBasketItem$Plain } from '../fn/basket-item/get-basket-items-basket-item-plain';\nimport { removeBasketItemBasketItem } from '../fn/basket-item/remove-basket-item-basket-item';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class BasketItemService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `addBasketItemBasketItem()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addBasketItemBasketItem()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  addBasketItemBasketItem$Response(params, context) {\n    return addBasketItemBasketItem(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `addBasketItemBasketItem$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  addBasketItemBasketItem(params, context) {\n    return this.addBasketItemBasketItem$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `removeBasketItemBasketItem()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `removeBasketItemBasketItem()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeBasketItemBasketItem$Response(params, context) {\n    return removeBasketItemBasketItem(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `removeBasketItemBasketItem$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeBasketItemBasketItem(params, context) {\n    return this.removeBasketItemBasketItem$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getBasketItemsBasketItem()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasketItemsBasketItem$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasketItemsBasketItem$Plain$Response(params, context) {\n    return getBasketItemsBasketItem$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasketItemsBasketItem$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasketItemsBasketItem$Plain(params, context) {\n    return this.getBasketItemsBasketItem$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasketItemsBasketItem()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasketItemsBasketItem$Response(params, context) {\n    return getBasketItemsBasketItem(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasketItemsBasketItem$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasketItemsBasketItem(params, context) {\n    return this.getBasketItemsBasketItem$Response(params, context).pipe(map(r => r.body));\n  }\n}\nBasketItemService.AddBasketItemBasketItemPath = '/BasketItem';\nBasketItemService.RemoveBasketItemBasketItemPath = '/BasketItem';\nBasketItemService.GetBasketItemsBasketItemPath = '/BasketItem/{email}';\nBasketItemService.ɵfac = function BasketItemService_Factory(t) {\n  return new (t || BasketItemService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nBasketItemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BasketItemService,\n  factory: BasketItemService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,uBAAuB,QAAQ,+CAA+C;AAGvF,SAASC,wBAAwB,QAAQ,gDAAgD;AAEzF,SAASC,8BAA8B,QAAQ,sDAAsD;AAErG,SAASC,0BAA0B,QAAQ,kDAAkD;;;;AAI7F,OAAM,MAAOC,iBAAkB,SAAQL,WAAW;EAChDM,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,gCAAgC,CAACC,MAAuC,EAAEC,OAAqB;IAC7F,OAAOV,uBAAuB,CAAC,IAAI,CAACO,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC1E;EAEA;;;;;;EAMAV,uBAAuB,CAACS,MAAuC,EAAEC,OAAqB;IACpF,OAAO,IAAI,CAACF,gCAAgC,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAChEd,GAAG,CAAEe,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAC,mCAAmC,CAACN,MAA0C,EAAEC,OAAqB;IACnG,OAAOP,0BAA0B,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC7E;EAEA;;;;;;EAMAP,0BAA0B,CAACM,MAA0C,EAAEC,OAAqB;IAC1F,OAAO,IAAI,CAACK,mCAAmC,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACnEd,GAAG,CAAEe,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAE,uCAAuC,CAACP,MAA6C,EAAEC,OAAqB;IAC1G,OAAOR,8BAA8B,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACjF;EAEA;;;;;;EAMAR,8BAA8B,CAACO,MAA6C,EAAEC,OAAqB;IACjG,OAAO,IAAI,CAACM,uCAAuC,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACvEd,GAAG,CAAEe,CAAwC,IAAwBA,CAAC,CAACC,IAAI,CAAC,CAC7E;EACH;EAEA;;;;;;EAMAG,iCAAiC,CAACR,MAAuC,EAAEC,OAAqB;IAC9F,OAAOT,wBAAwB,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC3E;EAEA;;;;;;EAMAT,wBAAwB,CAACQ,MAAuC,EAAEC,OAAqB;IACrF,OAAO,IAAI,CAACO,iCAAiC,CAACR,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACjEd,GAAG,CAAEe,CAAwC,IAAwBA,CAAC,CAACC,IAAI,CAAC,CAC7E;EACH;;AApGWV,iBAAkB,CAMbc,2BAA2B,GAAG,aAAa;AANhDd,iBAAkB,CA+Bbe,8BAA8B,GAAG,aAAa;AA/BnDf,iBAAkB,CAwDbgB,4BAA4B,GAAG,qBAAqB;AAxDzDhB,iBAAkB;mBAAlBA,iBAAiB;AAAA;AAAjBA,iBAAkB;SAAlBA,iBAAiB;EAAAiB,SAAjBjB,iBAAiB;EAAAkB,YADJ;AAAM","names":["map","BaseService","addBasketItemBasketItem","getBasketItemsBasketItem","getBasketItemsBasketItem$Plain","removeBasketItemBasketItem","BasketItemService","constructor","config","http","addBasketItemBasketItem$Response","params","context","rootUrl","pipe","r","body","removeBasketItemBasketItem$Response","getBasketItemsBasketItem$Plain$Response","getBasketItemsBasketItem$Response","AddBasketItemBasketItemPath","RemoveBasketItemBasketItemPath","GetBasketItemsBasketItemPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/services/basket-item.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { addBasketItemBasketItem } from '../fn/basket-item/add-basket-item-basket-item';\nimport { AddBasketItemBasketItem$Params } from '../fn/basket-item/add-basket-item-basket-item';\nimport { BasketItem } from '../models/basket-item';\nimport { getBasketItemsBasketItem } from '../fn/basket-item/get-basket-items-basket-item';\nimport { GetBasketItemsBasketItem$Params } from '../fn/basket-item/get-basket-items-basket-item';\nimport { getBasketItemsBasketItem$Plain } from '../fn/basket-item/get-basket-items-basket-item-plain';\nimport { GetBasketItemsBasketItem$Plain$Params } from '../fn/basket-item/get-basket-items-basket-item-plain';\nimport { removeBasketItemBasketItem } from '../fn/basket-item/remove-basket-item-basket-item';\nimport { RemoveBasketItemBasketItem$Params } from '../fn/basket-item/remove-basket-item-basket-item';\n\n@Injectable({ providedIn: 'root' })\nexport class BasketItemService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `addBasketItemBasketItem()` */\n  static readonly AddBasketItemBasketItemPath = '/BasketItem';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `addBasketItemBasketItem()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  addBasketItemBasketItem$Response(params?: AddBasketItemBasketItem$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return addBasketItemBasketItem(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `addBasketItemBasketItem$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  addBasketItemBasketItem(params?: AddBasketItemBasketItem$Params, context?: HttpContext): Observable<void> {\n    return this.addBasketItemBasketItem$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `removeBasketItemBasketItem()` */\n  static readonly RemoveBasketItemBasketItemPath = '/BasketItem';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `removeBasketItemBasketItem()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeBasketItemBasketItem$Response(params?: RemoveBasketItemBasketItem$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return removeBasketItemBasketItem(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `removeBasketItemBasketItem$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  removeBasketItemBasketItem(params?: RemoveBasketItemBasketItem$Params, context?: HttpContext): Observable<void> {\n    return this.removeBasketItemBasketItem$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n  /** Path part for operation `getBasketItemsBasketItem()` */\n  static readonly GetBasketItemsBasketItemPath = '/BasketItem/{email}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasketItemsBasketItem$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasketItemsBasketItem$Plain$Response(params: GetBasketItemsBasketItem$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BasketItem>>> {\n    return getBasketItemsBasketItem$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasketItemsBasketItem$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasketItemsBasketItem$Plain(params: GetBasketItemsBasketItem$Plain$Params, context?: HttpContext): Observable<Array<BasketItem>> {\n    return this.getBasketItemsBasketItem$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<BasketItem>>): Array<BasketItem> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getBasketItemsBasketItem()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasketItemsBasketItem$Response(params: GetBasketItemsBasketItem$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BasketItem>>> {\n    return getBasketItemsBasketItem(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getBasketItemsBasketItem$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getBasketItemsBasketItem(params: GetBasketItemsBasketItem$Params, context?: HttpContext): Observable<Array<BasketItem>> {\n    return this.getBasketItemsBasketItem$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<BasketItem>>): Array<BasketItem> => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}