{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet CreateFoodComponent = class CreateFoodComponent {\n  constructor(route, router, authService, foodService, orderService, formBuilder) {\n    this.route = route;\n    this.router = router;\n    this.authService = authService;\n    this.foodService = foodService;\n    this.orderService = orderService;\n    this.formBuilder = formBuilder;\n    this.foodId = 'not loaded';\n    this.food = {};\n    this.handleError = err => {\n      if (err.status == 404) {\n        alert(\"Food not found!\");\n        this.router.navigate(['/menu']);\n      }\n      if (err.status == 409) {\n        console.log(\"err: \" + err);\n        alert(JSON.parse(err.error).message);\n      }\n      console.log(\"Response Error. Status: \", err.status);\n      console.log(\"Response Error. Status Text: \", err.statusText);\n      console.log(err);\n    };\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      imageUrl: [this.food.imageUrl, Validators.required],\n      name: [this.food.name, Validators.required],\n      description: [this.food.description, Validators.required],\n      price: [this.food.price, Validators.required],\n      preperationTime: [this.food.preperationTime]\n    });\n  }\n  saveChanges() {\n    console.log(this.form);\n    let dto = {\n      description: this.form.value.description,\n      id: \".\",\n      imageUrl: this.form.value.imageUrl,\n      name: this.form.value.name,\n      preperationTime: Number(this.form.value.preperationTime),\n      price: Number(this.form.value.price)\n    };\n    this.router.navigate(['/menu']);\n  }\n};\nCreateFoodComponent = __decorate([Component({\n  selector: 'app-create-food',\n  templateUrl: './create-food.component.html',\n  styleUrls: ['./create-food.component.css']\n})], CreateFoodComponent);\nexport { CreateFoodComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,UAAU,QAAQ,gBAAgB;AAOpC,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAO9BC,YAAoBC,KAAqB,EAC/BC,MAAc,EACdC,WAAwB,EACxBC,WAAwB,EACxBC,YAA0B,EAC1BC,WAAwB;IALd,UAAK,GAALL,KAAK;IACf,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;IACX,gBAAW,GAAXC,WAAW;IACX,iBAAY,GAAZC,YAAY;IACZ,gBAAW,GAAXC,WAAW;IAVrB,WAAM,GAAW,YAAY;IAC7B,SAAI,GAAW,EAAE;IAwCT,gBAAW,GAAIC,GAAQ,IAAI;MAEjC,IAAIA,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;QACrBC,KAAK,CAAC,iBAAiB,CAAC;QACxB,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;MAIjC,IAAIH,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;QACrBG,OAAO,CAACC,GAAG,CAAC,OAAO,GAAGL,GAAG,CAAC;QAC1BE,KAAK,CAACI,IAAI,CAACC,KAAK,CAACP,GAAG,CAACQ,KAAK,CAAC,CAACC,OAAO,CAAC;;MAGtCL,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEL,GAAG,CAACC,MAAM,CAAC;MACnDG,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEL,GAAG,CAACU,UAAU,CAAC;MAC5DN,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;IAClB,CAAC;EA/CsC;EAGvCW,QAAQ;IAEN,IAAI,CAACC,IAAI,GAAG,IAAI,CAACb,WAAW,CAACc,KAAK,CAAC;MACjCC,QAAQ,EAAE,CAAC,IAAI,CAACC,IAAI,CAACD,QAAQ,EAAEvB,UAAU,CAACyB,QAAQ,CAAC;MACnDC,IAAI,EAAE,CAAC,IAAI,CAACF,IAAI,CAACE,IAAI,EAAE1B,UAAU,CAACyB,QAAQ,CAAC;MAC3CE,WAAW,EAAE,CAAC,IAAI,CAACH,IAAI,CAACG,WAAW,EAAE3B,UAAU,CAACyB,QAAQ,CAAC;MACzDG,KAAK,EAAE,CAAC,IAAI,CAACJ,IAAI,CAACI,KAAK,EAAE5B,UAAU,CAACyB,QAAQ,CAAC;MAC7CI,eAAe,EAAE,CAAC,IAAI,CAACL,IAAI,CAACK,eAAe;KAC5C,CAAC;EAEJ;EAEAC,WAAW;IACTjB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACO,IAAI,CAAC;IAEtB,IAAIU,GAAG,GAAG;MACRJ,WAAW,EAAE,IAAI,CAACN,IAAI,CAACW,KAAK,CAACL,WAAW;MACxCM,EAAE,EAAE,GAAG;MACPV,QAAQ,EAAE,IAAI,CAACF,IAAI,CAACW,KAAK,CAACT,QAAQ;MAClCG,IAAI,EAAE,IAAI,CAACL,IAAI,CAACW,KAAK,CAACN,IAAI;MAC1BG,eAAe,EAAEK,MAAM,CAAC,IAAI,CAACb,IAAI,CAACW,KAAK,CAACH,eAAe,CAAC;MACxDD,KAAK,EAAEM,MAAM,CAAC,IAAI,CAACb,IAAI,CAACW,KAAK,CAACJ,KAAK;KACpC;IAGD,IAAI,CAACxB,MAAM,CAACQ,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACjC;CAmBD;AA5DYX,mBAAmB,eAL/BF,SAAS,CAAC;EACToC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GACWpC,mBAAmB,CA4D/B;SA5DYA,mBAAmB","names":["Component","Validators","CreateFoodComponent","constructor","route","router","authService","foodService","orderService","formBuilder","err","status","alert","navigate","console","log","JSON","parse","error","message","statusText","ngOnInit","form","group","imageUrl","food","required","name","description","price","preperationTime","saveChanges","dto","value","id","Number","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/create-food/create-food.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-create-food',\n  templateUrl: './create-food.component.html',\n  styleUrls: ['./create-food.component.css']\n})\nexport class CreateFoodComponent {\n\n  foodId: string = 'not loaded';\n  food: FoodRm = {};\n\n  form!: FormGroup;\n\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    private foodService: FoodService,\n    private orderService: OrderService,\n    private formBuilder: FormBuilder,) { }\n\n\n  ngOnInit(): void {\n\n    this.form = this.formBuilder.group({\n      imageUrl: [this.food.imageUrl, Validators.required],\n      name: [this.food.name, Validators.required],\n      description: [this.food.description, Validators.required],\n      price: [this.food.price, Validators.required],\n      preperationTime: [this.food.preperationTime]\n    });\n\n  }\n\n  saveChanges() {\n    console.log(this.form);\n\n    let dto = {\n      description: this.form.value.description,\n      id: \".\",\n      imageUrl: this.form.value.imageUrl,\n      name: this.form.value.name,\n      preperationTime: Number(this.form.value.preperationTime),\n      price: Number(this.form.value.price)\n    }\n\n\n    this.router.navigate(['/menu']);\n  }\n\n  private handleError = (err: any) => {\n\n    if (err.status == 404) {\n      alert(\"Food not found!\")\n      this.router.navigate(['/menu'])\n    }\n\n\n    if (err.status == 409) {\n      console.log(\"err: \" + err);\n      alert(JSON.parse(err.error).message)\n    }\n\n    console.log(\"Response Error. Status: \", err.status)\n    console.log(\"Response Error. Status Text: \", err.statusText)\n    console.log(err)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}