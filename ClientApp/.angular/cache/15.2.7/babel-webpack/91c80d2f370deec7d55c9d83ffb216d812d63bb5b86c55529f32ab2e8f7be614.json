{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { getAllStatusesStatus } from '../fn/status/get-all-statuses-status';\nimport { getAllStatusesStatus$Plain } from '../fn/status/get-all-statuses-status-plain';\nimport { getStatusByIdStatus } from '../fn/status/get-status-by-id-status';\nimport { getStatusByIdStatus$Plain } from '../fn/status/get-status-by-id-status-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class StatusService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `getStatusByIdStatus()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getStatusByIdStatus$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatusByIdStatus$Plain$Response(params, context) {\n    return getStatusByIdStatus$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getStatusByIdStatus$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatusByIdStatus$Plain(params, context) {\n    return this.getStatusByIdStatus$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getStatusByIdStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatusByIdStatus$Response(params, context) {\n    return getStatusByIdStatus(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getStatusByIdStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatusByIdStatus(params, context) {\n    return this.getStatusByIdStatus$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `getAllStatusesStatus()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllStatusesStatus$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllStatusesStatus$Plain$Response(params, context) {\n    return getAllStatusesStatus$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllStatusesStatus$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllStatusesStatus$Plain(params, context) {\n    return this.getAllStatusesStatus$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllStatusesStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllStatusesStatus$Response(params, context) {\n    return getAllStatusesStatus(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllStatusesStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllStatusesStatus(params, context) {\n    return this.getAllStatusesStatus$Response(params, context).pipe(map(r => r.body));\n  }\n}\nStatusService.GetStatusByIdStatusPath = '/Status/{id}';\nStatusService.GetAllStatusesStatusPath = '/Status/all';\nStatusService.ɵfac = function StatusService_Factory(t) {\n  return new (t || StatusService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nStatusService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StatusService,\n  factory: StatusService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,oBAAoB,QAAQ,sCAAsC;AAE3E,SAASC,0BAA0B,QAAQ,4CAA4C;AAEvF,SAASC,mBAAmB,QAAQ,sCAAsC;AAE1E,SAASC,yBAAyB,QAAQ,4CAA4C;;;;AAKtF,OAAM,MAAOC,aAAc,SAAQL,WAAW;EAC5CM,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,kCAAkC,CAACC,MAAwC,EAAEC,OAAqB;IAChG,OAAOP,yBAAyB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC5E;EAEA;;;;;;EAMAP,yBAAyB,CAACM,MAAwC,EAAEC,OAAqB;IACvF,OAAO,IAAI,CAACF,kCAAkC,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAClEd,GAAG,CAAEe,CAA+B,IAAeA,CAAC,CAACC,IAAI,CAAC,CAC3D;EACH;EAEA;;;;;;EAMAC,4BAA4B,CAACN,MAAkC,EAAEC,OAAqB;IACpF,OAAOR,mBAAmB,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACtE;EAEA;;;;;;EAMAR,mBAAmB,CAACO,MAAkC,EAAEC,OAAqB;IAC3E,OAAO,IAAI,CAACK,4BAA4B,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC5Dd,GAAG,CAAEe,CAA+B,IAAeA,CAAC,CAACC,IAAI,CAAC,CAC3D;EACH;EAEA;;EAGA;;;;;;EAMAE,mCAAmC,CAACP,MAA0C,EAAEC,OAAqB;IACnG,OAAOT,0BAA0B,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC7E;EAEA;;;;;;EAMAT,0BAA0B,CAACQ,MAA0C,EAAEC,OAAqB;IAC1F,OAAO,IAAI,CAACM,mCAAmC,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACnEd,GAAG,CAAEe,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;EAEA;;;;;;EAMAG,6BAA6B,CAACR,MAAoC,EAAEC,OAAqB;IACvF,OAAOV,oBAAoB,CAAC,IAAI,CAACO,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACvE;EAEA;;;;;;EAMAV,oBAAoB,CAACS,MAAoC,EAAEC,OAAqB;IAC9E,OAAO,IAAI,CAACO,6BAA6B,CAACR,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC7Dd,GAAG,CAAEe,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;;AAjGWV,aAAc,CAMTc,uBAAuB,GAAG,cAAc;AAN7Cd,aAAc,CAqDTe,wBAAwB,GAAG,aAAa;AArD7Cf,aAAc;mBAAdA,aAAa;AAAA;AAAbA,aAAc;SAAdA,aAAa;EAAAgB,SAAbhB,aAAa;EAAAiB,YADA;AAAM","names":["map","BaseService","getAllStatusesStatus","getAllStatusesStatus$Plain","getStatusByIdStatus","getStatusByIdStatus$Plain","StatusService","constructor","config","http","getStatusByIdStatus$Plain$Response","params","context","rootUrl","pipe","r","body","getStatusByIdStatus$Response","getAllStatusesStatus$Plain$Response","getAllStatusesStatus$Response","GetStatusByIdStatusPath","GetAllStatusesStatusPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/services/status.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { getAllStatusesStatus } from '../fn/status/get-all-statuses-status';\nimport { GetAllStatusesStatus$Params } from '../fn/status/get-all-statuses-status';\nimport { getAllStatusesStatus$Plain } from '../fn/status/get-all-statuses-status-plain';\nimport { GetAllStatusesStatus$Plain$Params } from '../fn/status/get-all-statuses-status-plain';\nimport { getStatusByIdStatus } from '../fn/status/get-status-by-id-status';\nimport { GetStatusByIdStatus$Params } from '../fn/status/get-status-by-id-status';\nimport { getStatusByIdStatus$Plain } from '../fn/status/get-status-by-id-status-plain';\nimport { GetStatusByIdStatus$Plain$Params } from '../fn/status/get-status-by-id-status-plain';\nimport { StatusRm } from '../models/status-rm';\n\n@Injectable({ providedIn: 'root' })\nexport class StatusService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `getStatusByIdStatus()` */\n  static readonly GetStatusByIdStatusPath = '/Status/{id}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getStatusByIdStatus$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatusByIdStatus$Plain$Response(params: GetStatusByIdStatus$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<StatusRm>> {\n    return getStatusByIdStatus$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getStatusByIdStatus$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatusByIdStatus$Plain(params: GetStatusByIdStatus$Plain$Params, context?: HttpContext): Observable<StatusRm> {\n    return this.getStatusByIdStatus$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<StatusRm>): StatusRm => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getStatusByIdStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatusByIdStatus$Response(params: GetStatusByIdStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<StatusRm>> {\n    return getStatusByIdStatus(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getStatusByIdStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getStatusByIdStatus(params: GetStatusByIdStatus$Params, context?: HttpContext): Observable<StatusRm> {\n    return this.getStatusByIdStatus$Response(params, context).pipe(\n      map((r: StrictHttpResponse<StatusRm>): StatusRm => r.body)\n    );\n  }\n\n  /** Path part for operation `getAllStatusesStatus()` */\n  static readonly GetAllStatusesStatusPath = '/Status/all';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllStatusesStatus$Plain()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllStatusesStatus$Plain$Response(params?: GetAllStatusesStatus$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StatusRm>>> {\n    return getAllStatusesStatus$Plain(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllStatusesStatus$Plain$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllStatusesStatus$Plain(params?: GetAllStatusesStatus$Plain$Params, context?: HttpContext): Observable<Array<StatusRm>> {\n    return this.getAllStatusesStatus$Plain$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<StatusRm>>): Array<StatusRm> => r.body)\n    );\n  }\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getAllStatusesStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllStatusesStatus$Response(params?: GetAllStatusesStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StatusRm>>> {\n    return getAllStatusesStatus(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `getAllStatusesStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getAllStatusesStatus(params?: GetAllStatusesStatus$Params, context?: HttpContext): Observable<Array<StatusRm>> {\n    return this.getAllStatusesStatus$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<StatusRm>>): Array<StatusRm> => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}