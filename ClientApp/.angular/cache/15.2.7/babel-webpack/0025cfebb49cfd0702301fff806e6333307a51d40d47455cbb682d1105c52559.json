{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { changeOrderIdOrderItem } from '../fn/order-item/change-order-id-order-item';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class OrderItemService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `changeOrderIdOrderItem()` */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `changeOrderIdOrderItem()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  changeOrderIdOrderItem$Response(params, context) {\n    return changeOrderIdOrderItem(this.http, this.rootUrl, params, context);\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `changeOrderIdOrderItem$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  changeOrderIdOrderItem(params, context) {\n    return this.changeOrderIdOrderItem$Response(params, context).pipe(map(r => r.body));\n  }\n}\nOrderItemService.ChangeOrderIdOrderItemPath = '/OrderItem/ChangeOrderId';\nOrderItemService.ɵfac = function OrderItemService_Factory(t) {\n  return new (t || OrderItemService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nOrderItemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderItemService,\n  factory: OrderItemService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,sBAAsB,QAAQ,6CAA6C;;;;AAIpF,OAAM,MAAOC,gBAAiB,SAAQF,WAAW;EAC/CG,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,+BAA+B,CAACC,MAAsC,EAAEC,OAAqB;IAC3F,OAAOP,sBAAsB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACzE;EAEA;;;;;;EAMAP,sBAAsB,CAACM,MAAsC,EAAEC,OAAqB;IAClF,OAAO,IAAI,CAACF,+BAA+B,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC/DX,GAAG,CAAEY,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;;AA5BWV,gBAAiB,CAMZW,0BAA0B,GAAG,0BAA0B;AAN5DX,gBAAiB;mBAAjBA,gBAAgB;AAAA;AAAhBA,gBAAiB;SAAjBA,gBAAgB;EAAAY,SAAhBZ,gBAAgB;EAAAa,YADH;AAAM","names":["map","BaseService","changeOrderIdOrderItem","OrderItemService","constructor","config","http","changeOrderIdOrderItem$Response","params","context","rootUrl","pipe","r","body","ChangeOrderIdOrderItemPath","factory","providedIn"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/api/services/order-item.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\n\nimport { changeOrderIdOrderItem } from '../fn/order-item/change-order-id-order-item';\nimport { ChangeOrderIdOrderItem$Params } from '../fn/order-item/change-order-id-order-item';\n\n@Injectable({ providedIn: 'root' })\nexport class OrderItemService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `changeOrderIdOrderItem()` */\n  static readonly ChangeOrderIdOrderItemPath = '/OrderItem/ChangeOrderId';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `changeOrderIdOrderItem()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  changeOrderIdOrderItem$Response(params?: ChangeOrderIdOrderItem$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\n    return changeOrderIdOrderItem(this.http, this.rootUrl, params, context);\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `changeOrderIdOrderItem$Response()` instead.\n   *\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\n   */\n  changeOrderIdOrderItem(params?: ChangeOrderIdOrderItem$Params, context?: HttpContext): Observable<void> {\n    return this.changeOrderIdOrderItem$Response(params, context).pipe(\n      map((r: StrictHttpResponse<void>): void => r.body)\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}