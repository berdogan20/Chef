{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class BuyFoodComponent {}\nBuyFoodComponent.ɵfac = function BuyFoodComponent_Factory(t) {\n  return new (t || BuyFoodComponent)();\n};\nBuyFoodComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BuyFoodComponent,\n  selectors: [[\"app-buy-food\"]],\n  decls: 1,\n  vars: 0,\n  consts: [[1, \"container\"]],\n  template: function BuyFoodComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n  },\n  styles: [\"button[_ngcontent-%COMP%] {\\n  background-color: #b1b2ff;\\n  color: white;\\n}\\n\\nbutton[_ngcontent-%COMP%]:hover {\\n    color: #b1b2ff;\\n    background-color: white;\\n    border: 1px solid #b1b2ff;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYnV5LWZvb2QvYnV5LWZvb2QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHlCQUF5QjtFQUN6QixZQUFZO0FBQ2Q7O0FBRUE7SUFDSSxjQUFjO0lBQ2QsdUJBQXVCO0lBQ3ZCLHlCQUF5QjtFQUMzQiIsInNvdXJjZXNDb250ZW50IjpbImJ1dHRvbiB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNiMWIyZmY7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxuYnV0dG9uOmhvdmVyIHtcbiAgICBjb2xvcjogI2IxYjJmZjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYjFiMmZmO1xuICB9XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":";AAaA,OAAM,MAAOA,gBAAgB;AAAhBA,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;QAAhBA,gBAAgB;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCb7BC,yBAwDM","names":["BuyFoodComponent","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/buy-food/buy-food.component.ts","/Users/beyzaerdogan/Desktop/Chef/Chef/ClientApp/src/app/buy-food/buy-food.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CategoryService, FoodService, OrderService } from '../api/services';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FoodRm, OrderDto, OrderItem } from '../api/models';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../auth/auth.service';\n\n\n@Component({\n  selector: 'app-buy-food',\n  templateUrl: './buy-food.component.html',\n  styleUrls: ['./buy-food.component.css']\n})\nexport class BuyFoodComponent implements OnInit {\n\n  //foodId: string = 'not loaded';\n  //food: FoodRm = {};\n  //category: string = \"\";\n\n\n  //constructor(private route: ActivatedRoute,\n  //  private router: Router,\n  //  private authService: AuthService,\n  //  private foodService: FoodService,\n  //  private orderService: OrderService,\n  //  private categoryService: CategoryService,\n  //  private fb: FormBuilder  ) { }\n\n\n  //form = this.fb.group({\n  //  number: [1, Validators.compose([Validators.required, Validators.min(1), Validators.max(10)])]\n  //})\n\n  //ngOnInit(): void {\n  //  this.route.paramMap\n  //    .subscribe(p => this.findFood(p.get(\"foodId\")))\n  //}\n\n  //private findFood = (foodId: string | null) => {\n  //  this.foodId = foodId ?? 'not passed';\n\n  //  this.foodService.findFood({ id: this.foodId })\n  //    .subscribe(\n  //      food => {\n  //        this.food = food\n  //        this.getCategory(this.food.categoryId!);\n  //      },\n  //      err => this.handleError(err)\n  //    );\n  // }\n\n  //private handleError = (err: any) => {\n\n  //  if (err.status == 404) {\n  //    alert(\"Food not found!\")\n  //    this.router.navigate(['/menu'])\n  //  }\n\n\n  //  if (err.status == 409) {\n  //    console.log(\"err: \" + err);\n  //    alert(JSON.parse(err.error).message)\n  //  }\n\n  //  console.log(\"Response Error. Status: \", err.status)\n  //  console.log(\"Response Error. Status Text: \", err.statusText)\n  //  console.log(err)\n  //}\n\n  //buy() {\n\n  //  if (this.form.invalid)\n  //    return;\n\n  //    // I will use Dto\n  //    // because it will be a post operation\n\n  //  const orderItem: OrderItem = {\n  //    address: this.authService.currentUser?.address!,\n  //    amount: this.form.get('number')?.value!,\n  //    foodId: this.food.id,\n  //    orderId: Date.now().toString(), // Using current timestamp as orderId\n  //    orderOwner: this.authService.currentUser?.email!,\n  //    status: \"Your order has been received.\"\n  //  }\n\n  //  console.log(order);\n\n  //  this.orderService.buyOrder({ body: order })\n  //    .subscribe(\n  //      _ => this.router.navigate(['/my-orders']),\n  //      err => this.handleError(err)\n  //    );\n\n  \n  //}\n\n  //get number() {\n  //  return this.form.controls.number\n  //}\n\n  //getCategory(id: number) {\n  //  this.categoryService.findCategory({ id: id })\n  //    .subscribe(rm => this.category = rm.name!,\n  //      err => this.handleError(err));\n  //}\n}\n","<div class=\"container\">\n\n    <!--<div class=\"card mb-3\" style=\"max-width: 100%;\">\n        <div class=\"row g-0\">\n            <div class=\"col-md-4\">\n                <img [src]=\"food.imageUrl\" class=\"img-fluid rounded-start\" [alt]=\"food.name\">\n            </div>\n\n            <div class=\"col-md-8\">\n                <div class=\"card-body\">\n                    <h4 class=\"card-title\"> {{ category }} </h4>\n                    <h5 class=\"card-title\"> {{ food.name }} </h5>\n                    <p class=\"card-text\"> {{ food.description }} </p>\n                    <p class=\"card-text\"> It will be preperad in {{ food.preperationTime }} minutes </p>\n                    <p class=\"card-text\">  $ {{ food.price }} </p>\n                </div>\n\n                <div class=\"card-body\">\n                    <form [formGroup]=\"form\" (ngSubmit)=\"buy()\">\n                        <label class=\"form-label mt-5\" for=\"numberOfOrders\">Number of Orders</label>\n\n                        <input formControlName=\"number\"\n                               type=\"number\" class=\"form-control\"\n                               id=\"numberOfOrders\" name=\"numberOfOrders\"\n                               style=\"max-width: 30%;\"\n                               placeholder=\"Number of Orders\" />-->\n                        <!--<button type=\"submit\" class=\"btn\"\n                                style=\"width: 30%;\">\n                            <i class=\"fas fa-food\"></i>\n                            Add to basket\n                        </button>-->\n                    <!--</form>\n                    <div *ngIf=\"number.invalid && (number.dirty || number.touched)\" class=\"invalid-feedback d-block\">\n                        <div *ngIf=\"number.errors?.['required']\">\n                            How many servings do you want?\n                        </div>\n                        <div *ngIf=\"number.errors?.['min']\">\n                            You can not buy less than 1 serving!\n                        </div>\n                        <div *ngIf=\"number.errors?.['max']\">\n                            Our stocks do not have more than 10 servings.\n                        </div>\n                    </div>\n                </div>\n\n                \n\n            </div>\n\n\n            \n\n\n        </div>\n    </div>-->\n\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}